{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-monday","text":"<p>Important Notice: <code>prefect-monday</code> is no longer actively maintained. For more details, please see the Maintenance Status section below.</p> <p> </p>"},{"location":"#maintenance-status","title":"Maintenance Status","text":"<p><code>prefect-monday</code> has been a valuable part of the Prefect ecosystem. Due to shifts in our strategic priorities, we have decided to discontinue the active maintenance of this library. While we will not be updating the code or addressing issues, the existing codebase will remain accessible for archival purposes. We appreciate the support and contributions from our community.</p>"},{"location":"#welcome","title":"Welcome!","text":"<p>Prefect integrations interacting with monday.com.</p> <p>The tasks within this collection were created by a code generator using the service's GraphQL schema.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-monday</code> with <code>pip</code>:</p> <pre><code>pip install prefect-monday\n</code></pre> <p>Then, register to view the block on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_monday.credentials\n</code></pre>"},{"location":"#query-personal-account-info","title":"Query personal account info","text":"<p>Note, to use the <code>load</code> method, you must already have a block document saved through code or saved through the UI.</p> <pre><code>from prefect import flow\n\nfrom prefect_monday.credentials import MondayCredentials\nfrom prefect_monday.me import query_me\n\n@flow\ndef query_me_flow():\n    monday_credentials = MondayCredentials.load(\"BLOCK_NAME\")\n    result = query_me(monday_credentials)\n    return result\n\nquery_me_flow()\n</code></pre>"},{"location":"#query-available-boards","title":"Query available boards","text":"<pre><code>from prefect import flow\n\nfrom prefect_monday.credentials import MondayCredentials\nfrom prefect_monday.boards import query_boards\n\n@flow\ndef query_boards_flow():\n    monday_credentials = MondayCredentials.load(\"BLOCK_NAME\")\n    boards = query_boards(monday_credentials=monday_credentials)\n    return boards\n\nquery_boards_flow()\n</code></pre>"},{"location":"#create-new-workspace","title":"Create new workspace","text":"<pre><code>from prefect import flow\n\nfrom prefect_monday.credentials import MondayCredentials\nfrom prefect_monday.mutations import create_workspace\nfrom prefect_monday.schemas import graphql_schema\n\n@flow\ndef create_workspace_flow():\n    monday_credentials = MondayCredentials.load(\"BLOCK_NAME\")\n    workspace = create_workspace(\n        \"integrations-test-workspace\",\n        graphql_schema.WorkspaceKind.open,\n        monday_credentials=monday_credentials\n    )\n    return workspace\n\ncreate_workspace_flow()\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-monday</code>, feel free to open an issue in the prefect-monday repository.</p> <p>If you have any questions or issues while using <code>prefect-monday</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to \u2b50\ufe0f or watch <code>prefect-monday</code> for updates too!</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-monday</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/PrefectHQ/prefect-monday.git\n\ncd prefect-monday/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"account/","title":"Account","text":"<p>This is a module containing: Monday query_account* tasks</p>"},{"location":"account/#prefect_monday.account.query_account","title":"<code>query_account(monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/account.py</code> <pre><code>@task\nasync def query_account(\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.account(**strip_kwargs())\n\n    op_stack = (\"account\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"account\"]\n</code></pre>"},{"location":"account/#prefect_monday.account.query_account_plan","title":"<code>query_account_plan(monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>The account's payment plan.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/account.py</code> <pre><code>@task\nasync def query_account_plan(\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The account's payment plan.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.account(**strip_kwargs()).plan(**strip_kwargs())\n\n    op_stack = (\n        \"account\",\n        \"plan\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"account\"][\"plan\"]\n</code></pre>"},{"location":"app_subscription/","title":"App Subscription","text":"<p>This is a module containing: Monday query_app_subscription* tasks</p>"},{"location":"app_subscription/#prefect_monday.app_subscription.query_app_subscription","title":"<code>query_app_subscription(monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/app_subscription.py</code> <pre><code>@task\nasync def query_app_subscription(\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.app_subscription(**strip_kwargs())\n\n    op_stack = (\"app_subscription\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"app_subscription\"]\n</code></pre>"},{"location":"apps_monetization_status/","title":"Apps Monetization Status","text":"<p>This is a module containing: Monday query_apps_monetization_status* tasks</p>"},{"location":"apps_monetization_status/#prefect_monday.apps_monetization_status.query_apps_monetization_status","title":"<code>query_apps_monetization_status(monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/apps_monetization_status.py</code> <pre><code>@task\nasync def query_apps_monetization_status(\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.apps_monetization_status(**strip_kwargs())\n\n    op_stack = (\"apps_monetization_status\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"apps_monetization_status\"]\n</code></pre>"},{"location":"assets/","title":"Assets","text":"<p>This is a module containing: Monday query_assets* tasks</p>"},{"location":"assets/#prefect_monday.assets.query_assets","title":"<code>query_assets(ids, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>Iterable[int]</code> <p>Ids of the assets/files you want to get.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/assets.py</code> <pre><code>@task\nasync def query_assets(\n    ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        ids: Ids of the assets/files you want to get.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.assets(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\"assets\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"assets\"]\n</code></pre>"},{"location":"assets/#prefect_monday.assets.query_assets_uploaded_by","title":"<code>query_assets_uploaded_by(ids, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>The user who uploaded the file.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>Iterable[int]</code> <p>Ids of the assets/files you want to get.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/assets.py</code> <pre><code>@task\nasync def query_assets_uploaded_by(\n    ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The user who uploaded the file.\n\n    Args:\n        ids: Ids of the assets/files you want to get.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.assets(\n        **strip_kwargs(\n            ids=ids,\n        )\n    ).uploaded_by(**strip_kwargs())\n\n    op_stack = (\n        \"assets\",\n        \"uploaded_by\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"assets\"][\"uploaded_by\"]\n</code></pre>"},{"location":"boards/","title":"Boards","text":"<p>This is a module containing: Monday query_boards* tasks</p>"},{"location":"boards/#prefect_monday.boards.query_boards","title":"<code>query_boards(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived / deleted), the\n            default is active.\n        newest_first: Get the recently created boards at the top of the list,\n            (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    )\n\n    op_stack = (\"boards\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_activity_logs","title":"<code>query_boards_activity_logs(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, activity_logs_limit=25, activity_logs_page=1, user_ids=None, column_ids=None, group_ids=None, item_ids=None, from_=None, to=None, return_fields=None)</code>  <code>async</code>","text":"<p>The board log events.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>activity_logs_limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>activity_logs_page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to filter.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>Column ids to filter.</p> <code>None</code> <code>group_ids</code> <code>Iterable[str]</code> <p>Group ids to filter.</p> <code>None</code> <code>item_ids</code> <code>Iterable[int]</code> <p>Item id to filter.</p> <code>None</code> <code>from_</code> <code>datetime</code> <p>From timestamp (ISO8601).</p> <code>None</code> <code>to</code> <code>datetime</code> <p>To timestamp (ISO8601).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_activity_logs(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    activity_logs_limit: int = 25,\n    activity_logs_page: int = 1,\n    user_ids: Iterable[int] = None,\n    column_ids: Iterable[str] = None,\n    group_ids: Iterable[str] = None,\n    item_ids: Iterable[int] = None,\n    from_: datetime = None,\n    to: datetime = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The board log events.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        activity_logs_limit: Number of items to get, the default is 25.\n        activity_logs_page: Page number to get, starting at 1.\n        user_ids: User ids to filter.\n        column_ids: Column ids to filter.\n        group_ids: Group ids to filter.\n        item_ids: Item id to filter.\n        from_: From timestamp (ISO8601).\n        to: To timestamp (ISO8601).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).activity_logs(\n        **strip_kwargs(\n            limit=activity_logs_limit,\n            page=activity_logs_page,\n            user_ids=user_ids,\n            column_ids=column_ids,\n            group_ids=group_ids,\n            item_ids=item_ids,\n            from_=from_,\n            to=to,\n        )\n    )\n\n    op_stack = (\n        \"boards\",\n        \"activity_logs\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"activity_logs\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_columns","title":"<code>query_boards_columns(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, columns_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>The board's visible columns.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>columns_ids</code> <code>Iterable[str]</code> <p>A list of column unique identifiers.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_columns(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    columns_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The board's visible columns.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        columns_ids: A list of column unique identifiers.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).columns(\n        **strip_kwargs(\n            ids=columns_ids,\n        )\n    )\n\n    op_stack = (\n        \"boards\",\n        \"columns\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"columns\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_creator","title":"<code>query_boards_creator(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, return_fields=None)</code>  <code>async</code>","text":"<p>The creator of the board.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_creator(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The creator of the board.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"boards\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"creator\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_groups","title":"<code>query_boards_groups(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, groups_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>The board's visible groups.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>groups_ids</code> <code>Iterable[str]</code> <p>A list of group unique identifiers.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_groups(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    groups_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The board's visible groups.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        groups_ids: A list of group unique identifiers.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).groups(\n        **strip_kwargs(\n            ids=groups_ids,\n        )\n    )\n\n    op_stack = (\n        \"boards\",\n        \"groups\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"groups\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_items","title":"<code>query_boards_items(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, items_ids=None, items_limit=None, items_page=1, items_newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>The board's items (rows).</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>items_ids</code> <code>Iterable[int]</code> <p>A list of items unique identifiers.</p> <code>None</code> <code>items_limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>items_page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>items_newest_first</code> <code>bool</code> <p>Get the recently created items at the top of the list.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>When providing a list of item IDs, this flag will exclude items that are archived, deleted or belong to deleted items.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_items(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    items_ids: Iterable[int] = None,\n    items_limit: int = None,\n    items_page: int = 1,\n    items_newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The board's items (rows).\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        items_ids: A list of items unique identifiers.\n        items_limit: Number of items to get.\n        items_page: Page number to get, starting at 1.\n        items_newest_first: Get the recently created items at the top of the\n            list.\n        exclude_nonactive: When providing a list of item IDs, this flag\n            will exclude items that are archived, deleted or belong to\n            deleted items.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).items(\n        **strip_kwargs(\n            ids=items_ids,\n            limit=items_limit,\n            page=items_page,\n            newest_first=items_newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    )\n\n    op_stack = (\n        \"boards\",\n        \"items\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"items\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_owner","title":"<code>query_boards_owner(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, return_fields=None)</code>  <code>async</code>","text":"<p>The owner of the board.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_owner(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The owner of the board.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).owner(**strip_kwargs())\n\n    op_stack = (\n        \"boards\",\n        \"owner\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"owner\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_owners","title":"<code>query_boards_owners(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, return_fields=None)</code>  <code>async</code>","text":"<p>List of board owners.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_owners(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    List of board owners.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).owners(**strip_kwargs())\n\n    op_stack = (\n        \"boards\",\n        \"owners\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"owners\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_subscribers","title":"<code>query_boards_subscribers(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, return_fields=None)</code>  <code>async</code>","text":"<p>The board's subscribers.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_subscribers(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The board's subscribers.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"boards\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"subscribers\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_tags","title":"<code>query_boards_tags(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, return_fields=None)</code>  <code>async</code>","text":"<p>The board's specific tags.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_tags(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The board's specific tags.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).tags(**strip_kwargs())\n\n    op_stack = (\n        \"boards\",\n        \"tags\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"tags\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_top_group","title":"<code>query_boards_top_group(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, return_fields=None)</code>  <code>async</code>","text":"<p>The top group at this board.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_top_group(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The top group at this board.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).top_group(**strip_kwargs())\n\n    op_stack = (\n        \"boards\",\n        \"top_group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"top_group\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_updates","title":"<code>query_boards_updates(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, updates_limit=25, updates_page=1, return_fields=None)</code>  <code>async</code>","text":"<p>The board's updates.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>updates_limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>updates_page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_updates(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    updates_limit: int = 25,\n    updates_page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The board's updates.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        updates_limit: Number of items to get, the default is 25.\n        updates_page: Page number to get, starting at 1.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=updates_limit,\n            page=updates_page,\n        )\n    )\n\n    op_stack = (\n        \"boards\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"updates\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_views","title":"<code>query_boards_views(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, views_ids=None, type=None, return_fields=None)</code>  <code>async</code>","text":"<p>The board's views.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>views_ids</code> <code>Iterable[int]</code> <p>A list of view unique identifiers.</p> <code>None</code> <code>type</code> <code>str</code> <p>The view's type.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_views(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    views_ids: Iterable[int] = None,\n    type: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The board's views.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        views_ids: A list of view unique identifiers.\n        type: The view's type.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).views(\n        **strip_kwargs(\n            ids=views_ids,\n            type=type,\n        )\n    )\n\n    op_stack = (\n        \"boards\",\n        \"views\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"views\"]\n</code></pre>"},{"location":"boards/#prefect_monday.boards.query_boards_workspace","title":"<code>query_boards_workspace(monday_credentials, limit=25, page=1, ids=None, board_kind=None, state='active', newest_first=None, order_by=None, return_fields=None)</code>  <code>async</code>","text":"<p>The workspace that contains this board (null for main workspace).</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of boards unique identifiers.</p> <code>None</code> <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the board (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created boards at the top of the list, (Deprecated, use order_by:created_at).</p> <code>None</code> <code>order_by</code> <code>BoardsOrderBy</code> <p>Property to order by (created_at / used_at).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/boards.py</code> <pre><code>@task\nasync def query_boards_workspace(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    board_kind: graphql_schema.BoardKind = None,\n    state: graphql_schema.State = \"active\",\n    newest_first: bool = None,\n    order_by: graphql_schema.BoardsOrderBy = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The workspace that contains this board (null for main workspace).\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of boards unique identifiers.\n        board_kind: The board's kind (public / private / share).\n        state: The state of the board (all / active / archived /\n            deleted), the default is active.\n        newest_first: Get the recently created boards at the top of the\n            list, (Deprecated, use order_by:created_at).\n        order_by: Property to order by (created_at / used_at).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.boards(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            board_kind=board_kind,\n            state=state,\n            newest_first=newest_first,\n            order_by=order_by,\n        )\n    ).workspace(**strip_kwargs())\n\n    op_stack = (\n        \"boards\",\n        \"workspace\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"boards\"][\"workspace\"]\n</code></pre>"},{"location":"complexity/","title":"Complexity","text":"<p>This is a module containing: Monday query_complexity* tasks</p>"},{"location":"complexity/#prefect_monday.complexity.query_complexity","title":"<code>query_complexity(monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/complexity.py</code> <pre><code>@task\nasync def query_complexity(\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.complexity(**strip_kwargs())\n\n    op_stack = (\"complexity\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"complexity\"]\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":"<p>Credential classes used to perform authenticated interactions with Monday</p>"},{"location":"credentials/#prefect_monday.credentials.MondayCredentials","title":"<code>MondayCredentials</code>","text":"<p>             Bases: <code>Block</code></p> <p>Block used to manage Monday authentication.</p> <p>Attributes:</p> Name Type Description <code>token</code> <code>SecretStr</code> <p>the token to authenticate into Monday.</p> <p>Examples:</p> <p>Load stored Monday credentials: <pre><code>from prefect_monday import MondayCredentials\nmonday_credentials_block = MondayCredentials.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_monday/credentials.py</code> <pre><code>class MondayCredentials(Block):\n    \"\"\"\n    Block used to manage Monday authentication.\n\n    Attributes:\n        token: the token to authenticate into Monday.\n\n    Examples:\n        Load stored Monday credentials:\n        ```python\n        from prefect_monday import MondayCredentials\n        monday_credentials_block = MondayCredentials.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    _block_type_name = \"Monday Credentials\"\n    _logo_url = \"https://cdn.sanity.io/images/3ugk85nk/production/ad8614977614bcafee59ec5a3ef080111f045ffc-250x250.png\"  # noqa\n\n    token: SecretStr = None\n\n    def get_endpoint(self) -&gt; HTTPEndpoint:\n        \"\"\"\n        Gets an authenticated Monday GraphQL HTTPEndpoint.\n\n        Returns:\n            An authenticated Monday GraphQL HTTPEndpoint\n\n        Example:\n            Gets an authenticated Monday GraphQL HTTPEndpoint.\n            ```python\n            from prefect import flow\n            from prefect_monday import MondayCredentials\n\n            @flow\n            def example_get_endpoint_flow():\n                token = \"token_xxxxxxx\"\n                monday_credentials = MondayCredentials(token=token)\n                endpoint = monday_credentials.get_endpoint()\n                return endpoint\n\n            example_get_endpoint_flow()\n            ```\n        \"\"\"\n        if self.token is not None:\n            base_headers = {\"Authorization\": f\"Bearer {self.token.get_secret_value()}\"}\n        else:\n            base_headers = None\n        endpoint = HTTPEndpoint(\"https://api.monday.com/v2\", base_headers=base_headers)\n        return endpoint\n</code></pre>"},{"location":"credentials/#prefect_monday.credentials.MondayCredentials.get_endpoint","title":"<code>get_endpoint()</code>","text":"<p>Gets an authenticated Monday GraphQL HTTPEndpoint.</p> <p>Returns:</p> Type Description <code>HTTPEndpoint</code> <p>An authenticated Monday GraphQL HTTPEndpoint</p> Example <p>Gets an authenticated Monday GraphQL HTTPEndpoint. <pre><code>from prefect import flow\nfrom prefect_monday import MondayCredentials\n\n@flow\ndef example_get_endpoint_flow():\n    token = \"token_xxxxxxx\"\n    monday_credentials = MondayCredentials(token=token)\n    endpoint = monday_credentials.get_endpoint()\n    return endpoint\n\nexample_get_endpoint_flow()\n</code></pre></p> Source code in <code>prefect_monday/credentials.py</code> <pre><code>def get_endpoint(self) -&gt; HTTPEndpoint:\n    \"\"\"\n    Gets an authenticated Monday GraphQL HTTPEndpoint.\n\n    Returns:\n        An authenticated Monday GraphQL HTTPEndpoint\n\n    Example:\n        Gets an authenticated Monday GraphQL HTTPEndpoint.\n        ```python\n        from prefect import flow\n        from prefect_monday import MondayCredentials\n\n        @flow\n        def example_get_endpoint_flow():\n            token = \"token_xxxxxxx\"\n            monday_credentials = MondayCredentials(token=token)\n            endpoint = monday_credentials.get_endpoint()\n            return endpoint\n\n        example_get_endpoint_flow()\n        ```\n    \"\"\"\n    if self.token is not None:\n        base_headers = {\"Authorization\": f\"Bearer {self.token.get_secret_value()}\"}\n    else:\n        base_headers = None\n    endpoint = HTTPEndpoint(\"https://api.monday.com/v2\", base_headers=base_headers)\n    return endpoint\n</code></pre>"},{"location":"graphql/","title":"Graphql","text":"<p>This is a module containing generic GraphQL tasks</p>"},{"location":"graphql/#prefect_monday.graphql.execute_graphql","title":"<code>execute_graphql(op, monday_credentials, error_key='error_message', **vars)</code>  <code>async</code>","text":"<p>Generic function for executing GraphQL operations.</p> <p>Parameters:</p> Name Type Description Default <code>op</code> <code>Union[Operation, str]</code> <p>The operation, either as a valid GraphQL string or sgqlc.Operation.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>error_key</code> <code>str</code> <p>The key name to look out for in the response that indicates an error has occurred with the request.</p> <code>'error_message'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> <p>Examples:</p> <p>Queries the first three issues from the Prefect repository using a string query. <pre><code>from prefect import flow\nfrom prefect_github import GitHubCredentials\nfrom prefect_github.graphql import execute_graphql\n\n@flow()\ndef example_execute_graphql_flow():\n    op = '''\n        query GitHubRepoIssues($owner: String!, $name: String!) {\n            repository(owner: $owner, name: $name) {\n                issues(last: 3) {\n                    nodes {\n                        number\n                        title\n                    }\n                }\n            }\n        }\n    '''\n    token = \"ghp_...\"\n    github_credentials = GitHubCredentials(token=token)\n    params = dict(owner=\"PrefectHQ\", name=\"Prefect\")\n    result = execute_graphql(op, github_credentials, **params)\n    return result\n\nexample_execute_graphql_flow()\n</code></pre></p> <p>Queries the first three issues from Prefect repository using a sgqlc.Operation. <pre><code>from prefect import flow\nfrom sgqlc.operation import Operation\nfrom prefect_github import GitHubCredentials\nfrom prefect_github.schemas import graphql_schema\nfrom prefect_github.graphql import execute_graphql\n\n@flow()\ndef example_execute_graphql_flow():\n    op = Operation(graphql_schema.Query)\n    op_settings = op.repository(\n        owner=\"PrefectHQ\", name=\"Prefect\"\n    ).issues(\n        first=3\n    ).nodes()\n    op_settings.__fields__(\"id\", \"title\")\n    token = \"ghp_...\"\n    github_credentials = GitHubCredentials(token=token)\n    result = execute_graphql(\n        op,\n        github_credentials,\n    )\n    return result\n\nexample_execute_graphql_flow()\n</code></pre></p> Source code in <code>prefect_monday/graphql.py</code> <pre><code>@task\nasync def execute_graphql(\n    op: Union[Operation, str],\n    monday_credentials: MondayCredentials,\n    error_key: str = \"error_message\",\n    **vars,\n) -&gt; Dict[str, Any]:\n    # NOTE: Maintainers can update these examples to match their collection!\n    \"\"\"\n    Generic function for executing GraphQL operations.\n\n    Args:\n        op: The operation, either as a valid GraphQL string or sgqlc.Operation.\n        monday_credentials: Credentials to use for authentication with Monday.\n        error_key: The key name to look out for in the response\n            that indicates an error has occurred with the request.\n\n    Returns:\n        A dict of the returned fields.\n\n    Examples:\n        Queries the first three issues from the Prefect repository\n        using a string query.\n        ```python\n        from prefect import flow\n        from prefect_github import GitHubCredentials\n        from prefect_github.graphql import execute_graphql\n\n        @flow()\n        def example_execute_graphql_flow():\n            op = '''\n                query GitHubRepoIssues($owner: String!, $name: String!) {\n                    repository(owner: $owner, name: $name) {\n                        issues(last: 3) {\n                            nodes {\n                                number\n                                title\n                            }\n                        }\n                    }\n                }\n            '''\n            token = \"ghp_...\"\n            github_credentials = GitHubCredentials(token=token)\n            params = dict(owner=\"PrefectHQ\", name=\"Prefect\")\n            result = execute_graphql(op, github_credentials, **params)\n            return result\n\n        example_execute_graphql_flow()\n        ```\n\n        Queries the first three issues from Prefect repository\n        using a sgqlc.Operation.\n        ```python\n        from prefect import flow\n        from sgqlc.operation import Operation\n        from prefect_github import GitHubCredentials\n        from prefect_github.schemas import graphql_schema\n        from prefect_github.graphql import execute_graphql\n\n        @flow()\n        def example_execute_graphql_flow():\n            op = Operation(graphql_schema.Query)\n            op_settings = op.repository(\n                owner=\"PrefectHQ\", name=\"Prefect\"\n            ).issues(\n                first=3\n            ).nodes()\n            op_settings.__fields__(\"id\", \"title\")\n            token = \"ghp_...\"\n            github_credentials = GitHubCredentials(token=token)\n            result = execute_graphql(\n                op,\n                github_credentials,\n            )\n            return result\n\n        example_execute_graphql_flow()\n        ```\n    \"\"\"\n    result = await _execute_graphql_op(\n        op, monday_credentials, error_key=error_key, **vars\n    )\n    return result\n</code></pre>"},{"location":"items/","title":"Items","text":"<p>This is a module containing: Monday query_items* tasks</p>"},{"location":"items/#prefect_monday.items.query_items","title":"<code>query_items(monday_credentials, limit=25, page=1, ids=None, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of items unique identifiers.</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created items at the top of the list.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>Excludes items that are inactive, deleted or belong to deleted items.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items.py</code> <pre><code>@task\nasync def query_items(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of items unique identifiers.\n        newest_first: Get the recently created items at the top of the list.\n        exclude_nonactive: Excludes items that are inactive, deleted or belong\n            to deleted items.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    )\n\n    op_stack = (\"items\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items\"]\n</code></pre>"},{"location":"items/#prefect_monday.items.query_items_assets","title":"<code>query_items_assets(monday_credentials, limit=25, page=1, ids=None, newest_first=None, exclude_nonactive=None, assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>The item's assets/files.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of items unique identifiers.</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created items at the top of the list.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>Excludes items that are inactive, deleted or belong to deleted items.</p> <code>None</code> <code>assets_source</code> <code>AssetsSource</code> <p>The assets source (all / columns / gallery).</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>Ids of the columns you want to get assets from.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items.py</code> <pre><code>@task\nasync def query_items_assets(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's assets/files.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of items unique identifiers.\n        newest_first: Get the recently created items at the top of the\n            list.\n        exclude_nonactive: Excludes items that are inactive, deleted or\n            belong to deleted items.\n        assets_source: The assets source (all / columns / gallery).\n        column_ids: Ids of the columns you want to get assets from.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    ).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"items\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items\"][\"assets\"]\n</code></pre>"},{"location":"items/#prefect_monday.items.query_items_board","title":"<code>query_items_board(monday_credentials, limit=25, page=1, ids=None, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>The board that contains this item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of items unique identifiers.</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created items at the top of the list.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>Excludes items that are inactive, deleted or belong to deleted items.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items.py</code> <pre><code>@task\nasync def query_items_board(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The board that contains this item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of items unique identifiers.\n        newest_first: Get the recently created items at the top of the\n            list.\n        exclude_nonactive: Excludes items that are inactive, deleted or\n            belong to deleted items.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"items\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items\"][\"board\"]\n</code></pre>"},{"location":"items/#prefect_monday.items.query_items_column_values","title":"<code>query_items_column_values(monday_credentials, limit=25, page=1, ids=None, newest_first=None, exclude_nonactive=None, column_values_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>The item's column values.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of items unique identifiers.</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created items at the top of the list.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>Excludes items that are inactive, deleted or belong to deleted items.</p> <code>None</code> <code>column_values_ids</code> <code>Iterable[str]</code> <p>A list of column ids to return.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items.py</code> <pre><code>@task\nasync def query_items_column_values(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    column_values_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's column values.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of items unique identifiers.\n        newest_first: Get the recently created items at the top of the\n            list.\n        exclude_nonactive: Excludes items that are inactive, deleted or\n            belong to deleted items.\n        column_values_ids: A list of column ids to return.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    ).column_values(\n        **strip_kwargs(\n            ids=column_values_ids,\n        )\n    )\n\n    op_stack = (\n        \"items\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items\"][\"column_values\"]\n</code></pre>"},{"location":"items/#prefect_monday.items.query_items_creator","title":"<code>query_items_creator(monday_credentials, limit=25, page=1, ids=None, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>The item's creator.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of items unique identifiers.</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created items at the top of the list.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>Excludes items that are inactive, deleted or belong to deleted items.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items.py</code> <pre><code>@task\nasync def query_items_creator(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's creator.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of items unique identifiers.\n        newest_first: Get the recently created items at the top of the\n            list.\n        exclude_nonactive: Excludes items that are inactive, deleted or\n            belong to deleted items.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"items\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items\"][\"creator\"]\n</code></pre>"},{"location":"items/#prefect_monday.items.query_items_group","title":"<code>query_items_group(monday_credentials, limit=25, page=1, ids=None, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>The group that contains this item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of items unique identifiers.</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created items at the top of the list.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>Excludes items that are inactive, deleted or belong to deleted items.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items.py</code> <pre><code>@task\nasync def query_items_group(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The group that contains this item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of items unique identifiers.\n        newest_first: Get the recently created items at the top of the\n            list.\n        exclude_nonactive: Excludes items that are inactive, deleted or\n            belong to deleted items.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"items\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items\"][\"group\"]\n</code></pre>"},{"location":"items/#prefect_monday.items.query_items_parent_item","title":"<code>query_items_parent_item(monday_credentials, limit=25, page=1, ids=None, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>The parent item of a subitem.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of items unique identifiers.</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created items at the top of the list.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>Excludes items that are inactive, deleted or belong to deleted items.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items.py</code> <pre><code>@task\nasync def query_items_parent_item(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The parent item of a subitem.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of items unique identifiers.\n        newest_first: Get the recently created items at the top of the\n            list.\n        exclude_nonactive: Excludes items that are inactive, deleted or\n            belong to deleted items.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    ).parent_item(**strip_kwargs())\n\n    op_stack = (\n        \"items\",\n        \"parent_item\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items\"][\"parent_item\"]\n</code></pre>"},{"location":"items/#prefect_monday.items.query_items_subscribers","title":"<code>query_items_subscribers(monday_credentials, limit=25, page=1, ids=None, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>The pulses's subscribers.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of items unique identifiers.</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created items at the top of the list.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>Excludes items that are inactive, deleted or belong to deleted items.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items.py</code> <pre><code>@task\nasync def query_items_subscribers(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The pulses's subscribers.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of items unique identifiers.\n        newest_first: Get the recently created items at the top of the\n            list.\n        exclude_nonactive: Excludes items that are inactive, deleted or\n            belong to deleted items.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"items\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items\"][\"subscribers\"]\n</code></pre>"},{"location":"items/#prefect_monday.items.query_items_updates","title":"<code>query_items_updates(monday_credentials, limit=25, page=1, ids=None, newest_first=None, exclude_nonactive=None, updates_limit=25, updates_page=1, return_fields=None)</code>  <code>async</code>","text":"<p>The item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>ids</code> <code>Iterable[int]</code> <p>A list of items unique identifiers.</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created items at the top of the list.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>Excludes items that are inactive, deleted or belong to deleted items.</p> <code>None</code> <code>updates_limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>updates_page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items.py</code> <pre><code>@task\nasync def query_items_updates(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    ids: Iterable[int] = None,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    updates_limit: int = 25,\n    updates_page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's updates.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        ids: A list of items unique identifiers.\n        newest_first: Get the recently created items at the top of the\n            list.\n        exclude_nonactive: Excludes items that are inactive, deleted or\n            belong to deleted items.\n        updates_limit: Number of items to get, the default is 25.\n        updates_page: Page number to get, starting at 1.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            ids=ids,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=updates_limit,\n            page=updates_page,\n        )\n    )\n\n    op_stack = (\n        \"items\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items\"][\"updates\"]\n</code></pre>"},{"location":"items_by_column_values/","title":"Items By Column Values","text":"<p>This is a module containing: Monday query_items_by_column_values* tasks</p>"},{"location":"items_by_column_values/#prefect_monday.items_by_column_values.query_items_by_column_values","title":"<code>query_items_by_column_values(board_id, column_id, column_value, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_value</code> <code>str</code> <p>The column value to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_column_values.py</code> <pre><code>@task\nasync def query_items_by_column_values(\n    board_id: int,\n    column_id: str,\n    column_value: str,\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique identifier.\n        column_value: The column value to search items by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all / active / archived / deleted), the\n            default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_value=column_value,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    )\n\n    op_stack = (\"items_by_column_values\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_column_values\"]\n</code></pre>"},{"location":"items_by_column_values/#prefect_monday.items_by_column_values.query_items_by_column_values_assets","title":"<code>query_items_by_column_values_assets(board_id, column_id, column_value, monday_credentials, limit=None, page=1, column_type=None, state='active', assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>The item's assets/files.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_value</code> <code>str</code> <p>The column value to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>assets_source</code> <code>AssetsSource</code> <p>The assets source (all / columns / gallery).</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>Ids of the columns you want to get assets from.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_column_values.py</code> <pre><code>@task\nasync def query_items_by_column_values_assets(\n    board_id: int,\n    column_id: str,\n    column_value: str,\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's assets/files.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique identifier.\n        column_value: The column value to search items\n            by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all / active /\n            archived / deleted), the default is active.\n        assets_source: The assets source (all / columns / gallery).\n        column_ids: Ids of the columns you want to get assets from.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_value=column_value,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"items_by_column_values\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_column_values\"][\"assets\"]\n</code></pre>"},{"location":"items_by_column_values/#prefect_monday.items_by_column_values.query_items_by_column_values_board","title":"<code>query_items_by_column_values_board(board_id, column_id, column_value, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>The board that contains this item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_value</code> <code>str</code> <p>The column value to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_column_values.py</code> <pre><code>@task\nasync def query_items_by_column_values_board(\n    board_id: int,\n    column_id: str,\n    column_value: str,\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The board that contains this item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique identifier.\n        column_value: The column value to search items\n            by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all / active /\n            archived / deleted), the default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_value=column_value,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"items_by_column_values\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_column_values\"][\"board\"]\n</code></pre>"},{"location":"items_by_column_values/#prefect_monday.items_by_column_values.query_items_by_column_values_column_values","title":"<code>query_items_by_column_values_column_values(board_id, column_id, column_value, monday_credentials, limit=None, page=1, column_type=None, state='active', ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>The item's column values.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_value</code> <code>str</code> <p>The column value to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>ids</code> <code>Iterable[str]</code> <p>A list of column ids to return.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_column_values.py</code> <pre><code>@task\nasync def query_items_by_column_values_column_values(\n    board_id: int,\n    column_id: str,\n    column_value: str,\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's column values.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique identifier.\n        column_value: The column value to search items\n            by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all / active /\n            archived / deleted), the default is active.\n        ids: A list of column ids to return.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_value=column_value,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"items_by_column_values\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_column_values\"][\"column_values\"]\n</code></pre>"},{"location":"items_by_column_values/#prefect_monday.items_by_column_values.query_items_by_column_values_creator","title":"<code>query_items_by_column_values_creator(board_id, column_id, column_value, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>The item's creator.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_value</code> <code>str</code> <p>The column value to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_column_values.py</code> <pre><code>@task\nasync def query_items_by_column_values_creator(\n    board_id: int,\n    column_id: str,\n    column_value: str,\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's creator.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique identifier.\n        column_value: The column value to search items\n            by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all / active /\n            archived / deleted), the default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_value=column_value,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"items_by_column_values\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_column_values\"][\"creator\"]\n</code></pre>"},{"location":"items_by_column_values/#prefect_monday.items_by_column_values.query_items_by_column_values_group","title":"<code>query_items_by_column_values_group(board_id, column_id, column_value, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>The group that contains this item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_value</code> <code>str</code> <p>The column value to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_column_values.py</code> <pre><code>@task\nasync def query_items_by_column_values_group(\n    board_id: int,\n    column_id: str,\n    column_value: str,\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The group that contains this item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique identifier.\n        column_value: The column value to search items\n            by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all / active /\n            archived / deleted), the default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_value=column_value,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"items_by_column_values\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_column_values\"][\"group\"]\n</code></pre>"},{"location":"items_by_column_values/#prefect_monday.items_by_column_values.query_items_by_column_values_parent_item","title":"<code>query_items_by_column_values_parent_item(board_id, column_id, column_value, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>The parent item of a subitem.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_value</code> <code>str</code> <p>The column value to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_column_values.py</code> <pre><code>@task\nasync def query_items_by_column_values_parent_item(\n    board_id: int,\n    column_id: str,\n    column_value: str,\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The parent item of a subitem.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique identifier.\n        column_value: The column value to search items\n            by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all / active /\n            archived / deleted), the default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_value=column_value,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).parent_item(**strip_kwargs())\n\n    op_stack = (\n        \"items_by_column_values\",\n        \"parent_item\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_column_values\"][\"parent_item\"]\n</code></pre>"},{"location":"items_by_column_values/#prefect_monday.items_by_column_values.query_items_by_column_values_subscribers","title":"<code>query_items_by_column_values_subscribers(board_id, column_id, column_value, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>The pulses's subscribers.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_value</code> <code>str</code> <p>The column value to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_column_values.py</code> <pre><code>@task\nasync def query_items_by_column_values_subscribers(\n    board_id: int,\n    column_id: str,\n    column_value: str,\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The pulses's subscribers.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique identifier.\n        column_value: The column value to search items\n            by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all / active /\n            archived / deleted), the default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_value=column_value,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"items_by_column_values\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_column_values\"][\"subscribers\"]\n</code></pre>"},{"location":"items_by_column_values/#prefect_monday.items_by_column_values.query_items_by_column_values_updates","title":"<code>query_items_by_column_values_updates(board_id, column_id, column_value, monday_credentials, limit=None, page=1, column_type=None, state='active', updates_limit=25, updates_page=1, return_fields=None)</code>  <code>async</code>","text":"<p>The item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_value</code> <code>str</code> <p>The column value to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>updates_limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>updates_page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_column_values.py</code> <pre><code>@task\nasync def query_items_by_column_values_updates(\n    board_id: int,\n    column_id: str,\n    column_value: str,\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    updates_limit: int = 25,\n    updates_page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's updates.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique identifier.\n        column_value: The column value to search items\n            by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all / active /\n            archived / deleted), the default is active.\n        updates_limit: Number of items to get, the default is 25.\n        updates_page: Page number to get, starting at 1.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_value=column_value,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=updates_limit,\n            page=updates_page,\n        )\n    )\n\n    op_stack = (\n        \"items_by_column_values\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_column_values\"][\"updates\"]\n</code></pre>"},{"location":"items_by_multiple_column_values/","title":"Items By Multiple Column Values","text":"<p>This is a module containing: Monday query_items_by_multiple_column_values* tasks</p>"},{"location":"items_by_multiple_column_values/#prefect_monday.items_by_multiple_column_values.query_items_by_multiple_column_values","title":"<code>query_items_by_multiple_column_values(board_id, column_id, column_values, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_values</code> <code>Iterable[str]</code> <p>The column values to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_multiple_column_values.py</code> <pre><code>@task\nasync def query_items_by_multiple_column_values(\n    board_id: int,\n    column_id: str,\n    column_values: Iterable[str],\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique identifier.\n        column_values: The column values to search items by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all / active / archived / deleted), the\n            default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_values=column_values,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    )\n\n    op_stack = (\"items_by_multiple_column_values\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_multiple_column_values\"]\n</code></pre>"},{"location":"items_by_multiple_column_values/#prefect_monday.items_by_multiple_column_values.query_items_by_multiple_column_values_assets","title":"<code>query_items_by_multiple_column_values_assets(board_id, column_id, column_values, monday_credentials, limit=None, page=1, column_type=None, state='active', assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>The item's assets/files.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_values</code> <code>Iterable[str]</code> <p>The column values to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>assets_source</code> <code>AssetsSource</code> <p>The assets source (all / columns / gallery).</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>Ids of the columns you want to get assets from.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_multiple_column_values.py</code> <pre><code>@task\nasync def query_items_by_multiple_column_values_assets(\n    board_id: int,\n    column_id: str,\n    column_values: Iterable[str],\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's assets/files.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique\n            identifier.\n        column_values: The column values to\n            search items by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all /\n            active / archived / deleted), the default is active.\n        assets_source: The assets source (all / columns / gallery).\n        column_ids: Ids of the columns you want to get assets from.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_values=column_values,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"items_by_multiple_column_values\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_multiple_column_values\"][\"assets\"]\n</code></pre>"},{"location":"items_by_multiple_column_values/#prefect_monday.items_by_multiple_column_values.query_items_by_multiple_column_values_board","title":"<code>query_items_by_multiple_column_values_board(board_id, column_id, column_values, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>The board that contains this item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_values</code> <code>Iterable[str]</code> <p>The column values to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_multiple_column_values.py</code> <pre><code>@task\nasync def query_items_by_multiple_column_values_board(\n    board_id: int,\n    column_id: str,\n    column_values: Iterable[str],\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The board that contains this item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique\n            identifier.\n        column_values: The column values to\n            search items by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all /\n            active / archived / deleted), the default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_values=column_values,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"items_by_multiple_column_values\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_multiple_column_values\"][\"board\"]\n</code></pre>"},{"location":"items_by_multiple_column_values/#prefect_monday.items_by_multiple_column_values.query_items_by_multiple_column_values_column_values","title":"<code>query_items_by_multiple_column_values_column_values(board_id, column_id, column_values, monday_credentials, limit=None, page=1, column_type=None, state='active', ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>The item's column values.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_values</code> <code>Iterable[str]</code> <p>The column values to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>ids</code> <code>Iterable[str]</code> <p>A list of column ids to return.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_multiple_column_values.py</code> <pre><code>@task\nasync def query_items_by_multiple_column_values_column_values(\n    board_id: int,\n    column_id: str,\n    column_values: Iterable[str],\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's column values.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique\n            identifier.\n        column_values: The column values to\n            search items by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all /\n            active / archived / deleted), the default is active.\n        ids: A list of column ids to return.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_values=column_values,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"items_by_multiple_column_values\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_multiple_column_values\"][\"column_values\"]\n</code></pre>"},{"location":"items_by_multiple_column_values/#prefect_monday.items_by_multiple_column_values.query_items_by_multiple_column_values_creator","title":"<code>query_items_by_multiple_column_values_creator(board_id, column_id, column_values, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>The item's creator.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_values</code> <code>Iterable[str]</code> <p>The column values to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_multiple_column_values.py</code> <pre><code>@task\nasync def query_items_by_multiple_column_values_creator(\n    board_id: int,\n    column_id: str,\n    column_values: Iterable[str],\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's creator.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique\n            identifier.\n        column_values: The column values to\n            search items by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all /\n            active / archived / deleted), the default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_values=column_values,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"items_by_multiple_column_values\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_multiple_column_values\"][\"creator\"]\n</code></pre>"},{"location":"items_by_multiple_column_values/#prefect_monday.items_by_multiple_column_values.query_items_by_multiple_column_values_group","title":"<code>query_items_by_multiple_column_values_group(board_id, column_id, column_values, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>The group that contains this item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_values</code> <code>Iterable[str]</code> <p>The column values to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_multiple_column_values.py</code> <pre><code>@task\nasync def query_items_by_multiple_column_values_group(\n    board_id: int,\n    column_id: str,\n    column_values: Iterable[str],\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The group that contains this item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique\n            identifier.\n        column_values: The column values to\n            search items by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all /\n            active / archived / deleted), the default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_values=column_values,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"items_by_multiple_column_values\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_multiple_column_values\"][\"group\"]\n</code></pre>"},{"location":"items_by_multiple_column_values/#prefect_monday.items_by_multiple_column_values.query_items_by_multiple_column_values_parent_item","title":"<code>query_items_by_multiple_column_values_parent_item(board_id, column_id, column_values, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>The parent item of a subitem.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_values</code> <code>Iterable[str]</code> <p>The column values to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_multiple_column_values.py</code> <pre><code>@task\nasync def query_items_by_multiple_column_values_parent_item(\n    board_id: int,\n    column_id: str,\n    column_values: Iterable[str],\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The parent item of a subitem.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique\n            identifier.\n        column_values: The column values to\n            search items by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all /\n            active / archived / deleted), the default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_values=column_values,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).parent_item(**strip_kwargs())\n\n    op_stack = (\n        \"items_by_multiple_column_values\",\n        \"parent_item\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_multiple_column_values\"][\"parent_item\"]\n</code></pre>"},{"location":"items_by_multiple_column_values/#prefect_monday.items_by_multiple_column_values.query_items_by_multiple_column_values_subscribers","title":"<code>query_items_by_multiple_column_values_subscribers(board_id, column_id, column_values, monday_credentials, limit=None, page=1, column_type=None, state='active', return_fields=None)</code>  <code>async</code>","text":"<p>The pulses's subscribers.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_values</code> <code>Iterable[str]</code> <p>The column values to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_multiple_column_values.py</code> <pre><code>@task\nasync def query_items_by_multiple_column_values_subscribers(\n    board_id: int,\n    column_id: str,\n    column_values: Iterable[str],\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The pulses's subscribers.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique\n            identifier.\n        column_values: The column values to\n            search items by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all /\n            active / archived / deleted), the default is active.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_values=column_values,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"items_by_multiple_column_values\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_multiple_column_values\"][\"subscribers\"]\n</code></pre>"},{"location":"items_by_multiple_column_values/#prefect_monday.items_by_multiple_column_values.query_items_by_multiple_column_values_updates","title":"<code>query_items_by_multiple_column_values_updates(board_id, column_id, column_values, monday_credentials, limit=None, page=1, column_type=None, state='active', updates_limit=25, updates_page=1, return_fields=None)</code>  <code>async</code>","text":"<p>The item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>column_values</code> <code>Iterable[str]</code> <p>The column values to search items by.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get.</p> <code>None</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>column_type</code> <code>str</code> <p>The column type.</p> <code>None</code> <code>state</code> <code>State</code> <p>The state of the item (all / active / archived / deleted), the default is active.</p> <code>'active'</code> <code>updates_limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>updates_page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/items_by_multiple_column_values.py</code> <pre><code>@task\nasync def query_items_by_multiple_column_values_updates(\n    board_id: int,\n    column_id: str,\n    column_values: Iterable[str],\n    monday_credentials: MondayCredentials,\n    limit: int = None,\n    page: int = 1,\n    column_type: str = None,\n    state: graphql_schema.State = \"active\",\n    updates_limit: int = 25,\n    updates_page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The item's updates.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_id: The column's unique\n            identifier.\n        column_values: The column values to\n            search items by.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get.\n        page: Page number to get, starting at 1.\n        column_type: The column type.\n        state: The state of the item (all /\n            active / archived / deleted), the default is active.\n        updates_limit: Number of items to get, the default is 25.\n        updates_page: Page number to get, starting at 1.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.items_by_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_id=column_id,\n            column_values=column_values,\n            limit=limit,\n            page=page,\n            column_type=column_type,\n            state=state,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=updates_limit,\n            page=updates_page,\n        )\n    )\n\n    op_stack = (\n        \"items_by_multiple_column_values\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"items_by_multiple_column_values\"][\"updates\"]\n</code></pre>"},{"location":"me/","title":"Me","text":"<p>This is a module containing: Monday query_me* tasks</p>"},{"location":"me/#prefect_monday.me.query_me","title":"<code>query_me(monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/me.py</code> <pre><code>@task\nasync def query_me(\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.me(**strip_kwargs())\n\n    op_stack = (\"me\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"me\"]\n</code></pre>"},{"location":"me/#prefect_monday.me.query_me_account","title":"<code>query_me_account(monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>The user's account.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/me.py</code> <pre><code>@task\nasync def query_me_account(\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The user's account.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.me(**strip_kwargs()).account(**strip_kwargs())\n\n    op_stack = (\n        \"me\",\n        \"account\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"me\"][\"account\"]\n</code></pre>"},{"location":"me/#prefect_monday.me.query_me_teams","title":"<code>query_me_teams(monday_credentials, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>The teams the user is a member in.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>A list of teams unique identifiers.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/me.py</code> <pre><code>@task\nasync def query_me_teams(\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The teams the user is a member in.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: A list of teams unique identifiers.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.me(**strip_kwargs()).teams(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"me\",\n        \"teams\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"me\"][\"teams\"]\n</code></pre>"},{"location":"mutations/","title":"Mutations","text":"<p>This is a module containing: Monday mutation tasks</p>"},{"location":"mutations/#prefect_monday.mutations.add_file_to_column","title":"<code>add_file_to_column(item_id, column_id, file, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Add a file to a column value.</p> <p>Parameters:</p> Name Type Description Default <code>item_id</code> <code>int</code> <p>The item to add the file to.</p> required <code>column_id</code> <code>str</code> <p>The column to add the file to.</p> required <code>file</code> <code>datetime</code> <p>The file to upload.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_file_to_column(\n    item_id: int,\n    column_id: str,\n    file: datetime,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add a file to a column value.\n\n    Args:\n        item_id: The item to add the file to.\n        column_id: The column to add the file to.\n        file: The file to upload.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_file_to_column(\n        **strip_kwargs(\n            item_id=item_id,\n            column_id=column_id,\n            file=file,\n        )\n    )\n\n    op_stack = (\"add_file_to_column\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_file_to_column\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.add_file_to_column_uploaded_by","title":"<code>add_file_to_column_uploaded_by(item_id, column_id, file, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Add a file to a column value.</p> <p>Parameters:</p> Name Type Description Default <code>item_id</code> <code>int</code> <p>The item to add the file to.</p> required <code>column_id</code> <code>str</code> <p>The column to add the file to.</p> required <code>file</code> <code>datetime</code> <p>The file to upload.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_file_to_column_uploaded_by(\n    item_id: int,\n    column_id: str,\n    file: datetime,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add a file to a column value.\n\n    Args:\n        item_id: The item to add the file to.\n        column_id: The column to add the file to.\n        file: The file to upload.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_file_to_column(\n        **strip_kwargs(\n            item_id=item_id,\n            column_id=column_id,\n            file=file,\n        )\n    ).uploaded_by(**strip_kwargs())\n\n    op_stack = (\n        \"add_file_to_column\",\n        \"uploaded_by\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_file_to_column\"][\"uploaded_by\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.add_file_to_update","title":"<code>add_file_to_update(update_id, file, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Add a file to an update.</p> <p>Parameters:</p> Name Type Description Default <code>update_id</code> <code>int</code> <p>The update to add the file to.</p> required <code>file</code> <code>datetime</code> <p>The file to upload.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_file_to_update(\n    update_id: int,\n    file: datetime,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add a file to an update.\n\n    Args:\n        update_id: The update to add the file to.\n        file: The file to upload.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_file_to_update(\n        **strip_kwargs(\n            update_id=update_id,\n            file=file,\n        )\n    )\n\n    op_stack = (\"add_file_to_update\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_file_to_update\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.add_file_to_update_uploaded_by","title":"<code>add_file_to_update_uploaded_by(update_id, file, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Add a file to an update.</p> <p>Parameters:</p> Name Type Description Default <code>update_id</code> <code>int</code> <p>The update to add the file to.</p> required <code>file</code> <code>datetime</code> <p>The file to upload.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_file_to_update_uploaded_by(\n    update_id: int,\n    file: datetime,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add a file to an update.\n\n    Args:\n        update_id: The update to add the file to.\n        file: The file to upload.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_file_to_update(\n        **strip_kwargs(\n            update_id=update_id,\n            file=file,\n        )\n    ).uploaded_by(**strip_kwargs())\n\n    op_stack = (\n        \"add_file_to_update\",\n        \"uploaded_by\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_file_to_update\"][\"uploaded_by\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.add_subscribers_to_board","title":"<code>add_subscribers_to_board(board_id, user_ids, monday_credentials, kind='subscriber', return_fields=None)</code>  <code>async</code>","text":"<p>Add subscribers to a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to subscribe to a board.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>kind</code> <code>BoardSubscriberKind</code> <p>Subscribers kind (subscriber / owner).</p> <code>'subscriber'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_subscribers_to_board(\n    board_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    kind: graphql_schema.BoardSubscriberKind = \"subscriber\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add subscribers to a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        user_ids: User ids to subscribe to a board.\n        monday_credentials: Credentials to use for authentication with Monday.\n        kind: Subscribers kind (subscriber / owner).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_subscribers_to_board(\n        **strip_kwargs(\n            board_id=board_id,\n            user_ids=user_ids,\n            kind=kind,\n        )\n    )\n\n    op_stack = (\"add_subscribers_to_board\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_subscribers_to_board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.add_subscribers_to_board_account","title":"<code>add_subscribers_to_board_account(board_id, user_ids, monday_credentials, kind='subscriber', return_fields=None)</code>  <code>async</code>","text":"<p>Add subscribers to a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to subscribe to a board.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>kind</code> <code>BoardSubscriberKind</code> <p>Subscribers kind (subscriber / owner).</p> <code>'subscriber'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_subscribers_to_board_account(\n    board_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    kind: graphql_schema.BoardSubscriberKind = \"subscriber\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add subscribers to a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        user_ids: User ids to subscribe to a board.\n        monday_credentials: Credentials to use for authentication with Monday.\n        kind: Subscribers kind (subscriber / owner).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_subscribers_to_board(\n        **strip_kwargs(\n            board_id=board_id,\n            user_ids=user_ids,\n            kind=kind,\n        )\n    ).account(**strip_kwargs())\n\n    op_stack = (\n        \"add_subscribers_to_board\",\n        \"account\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_subscribers_to_board\"][\"account\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.add_subscribers_to_board_teams","title":"<code>add_subscribers_to_board_teams(board_id, user_ids, monday_credentials, kind='subscriber', ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Add subscribers to a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to subscribe to a board.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>kind</code> <code>BoardSubscriberKind</code> <p>Subscribers kind (subscriber / owner).</p> <code>'subscriber'</code> <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_subscribers_to_board_teams(\n    board_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    kind: graphql_schema.BoardSubscriberKind = \"subscriber\",\n    ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add subscribers to a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        user_ids: User ids to subscribe to a board.\n        monday_credentials: Credentials to use for authentication with Monday.\n        kind: Subscribers kind (subscriber / owner).\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_subscribers_to_board(\n        **strip_kwargs(\n            board_id=board_id,\n            user_ids=user_ids,\n            kind=kind,\n        )\n    ).teams(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"add_subscribers_to_board\",\n        \"teams\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_subscribers_to_board\"][\"teams\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.add_teams_to_workspace","title":"<code>add_teams_to_workspace(workspace_id, team_ids, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Add teams to a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>int</code> <p>The workspace's unique identifier.</p> required <code>team_ids</code> <code>Iterable[int]</code> <p>Team ids to subscribe to a workspace.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_teams_to_workspace(\n    workspace_id: int,\n    team_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add teams to a workspace.\n\n    Args:\n        workspace_id: The workspace's unique identifier.\n        team_ids: Team ids to subscribe to a workspace.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_teams_to_workspace(\n        **strip_kwargs(\n            workspace_id=workspace_id,\n            team_ids=team_ids,\n        )\n    )\n\n    op_stack = (\"add_teams_to_workspace\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_teams_to_workspace\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.add_teams_to_workspace_users","title":"<code>add_teams_to_workspace_users(workspace_id, team_ids, monday_credentials, ids=None, kind=None, newest_first=None, limit=None, emails=None, return_fields=None)</code>  <code>async</code>","text":"<p>Add teams to a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>int</code> <p>The workspace's unique identifier.</p> required <code>team_ids</code> <code>Iterable[int]</code> <p>Team ids to subscribe to a workspace.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>kind</code> <code>UserKind</code> <p>None.</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>None</code> <code>emails</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_teams_to_workspace_users(\n    workspace_id: int,\n    team_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    kind: graphql_schema.UserKind = None,\n    newest_first: bool = None,\n    limit: int = None,\n    emails: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add teams to a workspace.\n\n    Args:\n        workspace_id: The workspace's unique identifier.\n        team_ids: Team ids to subscribe to a workspace.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        kind: None.\n        newest_first: None.\n        limit: None.\n        emails: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_teams_to_workspace(\n        **strip_kwargs(\n            workspace_id=workspace_id,\n            team_ids=team_ids,\n        )\n    ).users(\n        **strip_kwargs(\n            ids=ids,\n            kind=kind,\n            newest_first=newest_first,\n            limit=limit,\n            emails=emails,\n        )\n    )\n\n    op_stack = (\n        \"add_teams_to_workspace\",\n        \"users\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_teams_to_workspace\"][\"users\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.add_users_to_workspace","title":"<code>add_users_to_workspace(workspace_id, user_ids, monday_credentials, kind='subscriber', return_fields=None)</code>  <code>async</code>","text":"<p>Add users to a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>int</code> <p>The workspace's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to subscribe to a workspace.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>kind</code> <code>WorkspaceSubscriberKind</code> <p>Subscribers kind (subscriber / owner).</p> <code>'subscriber'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_users_to_workspace(\n    workspace_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    kind: graphql_schema.WorkspaceSubscriberKind = \"subscriber\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add users to a workspace.\n\n    Args:\n        workspace_id: The workspace's unique identifier.\n        user_ids: User ids to subscribe to a workspace.\n        monday_credentials: Credentials to use for authentication with Monday.\n        kind: Subscribers kind (subscriber / owner).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_users_to_workspace(\n        **strip_kwargs(\n            workspace_id=workspace_id,\n            user_ids=user_ids,\n            kind=kind,\n        )\n    )\n\n    op_stack = (\"add_users_to_workspace\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_users_to_workspace\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.add_users_to_workspace_account","title":"<code>add_users_to_workspace_account(workspace_id, user_ids, monday_credentials, kind='subscriber', return_fields=None)</code>  <code>async</code>","text":"<p>Add users to a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>int</code> <p>The workspace's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to subscribe to a workspace.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>kind</code> <code>WorkspaceSubscriberKind</code> <p>Subscribers kind (subscriber / owner).</p> <code>'subscriber'</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_users_to_workspace_account(\n    workspace_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    kind: graphql_schema.WorkspaceSubscriberKind = \"subscriber\",\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add users to a workspace.\n\n    Args:\n        workspace_id: The workspace's unique identifier.\n        user_ids: User ids to subscribe to a workspace.\n        monday_credentials: Credentials to use for authentication with Monday.\n        kind: Subscribers kind (subscriber / owner).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_users_to_workspace(\n        **strip_kwargs(\n            workspace_id=workspace_id,\n            user_ids=user_ids,\n            kind=kind,\n        )\n    ).account(**strip_kwargs())\n\n    op_stack = (\n        \"add_users_to_workspace\",\n        \"account\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_users_to_workspace\"][\"account\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.add_users_to_workspace_teams","title":"<code>add_users_to_workspace_teams(workspace_id, user_ids, monday_credentials, kind='subscriber', ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Add users to a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>int</code> <p>The workspace's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to subscribe to a workspace.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>kind</code> <code>WorkspaceSubscriberKind</code> <p>Subscribers kind (subscriber / owner).</p> <code>'subscriber'</code> <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def add_users_to_workspace_teams(\n    workspace_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    kind: graphql_schema.WorkspaceSubscriberKind = \"subscriber\",\n    ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add users to a workspace.\n\n    Args:\n        workspace_id: The workspace's unique identifier.\n        user_ids: User ids to subscribe to a workspace.\n        monday_credentials: Credentials to use for authentication with Monday.\n        kind: Subscribers kind (subscriber / owner).\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.add_users_to_workspace(\n        **strip_kwargs(\n            workspace_id=workspace_id,\n            user_ids=user_ids,\n            kind=kind,\n        )\n    ).teams(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"add_users_to_workspace\",\n        \"teams\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"add_users_to_workspace\"][\"teams\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board","title":"<code>archive_board(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    )\n\n    op_stack = (\"archive_board\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_activity_logs","title":"<code>archive_board_activity_logs(board_id, monday_credentials, limit=25, page=1, user_ids=None, column_ids=None, group_ids=None, item_ids=None, from_=None, to=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>user_ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>group_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>item_ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>from_</code> <code>datetime</code> <p>None.</p> <code>None</code> <code>to</code> <code>datetime</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_activity_logs(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    user_ids: Iterable[int] = None,\n    column_ids: Iterable[str] = None,\n    group_ids: Iterable[str] = None,\n    item_ids: Iterable[int] = None,\n    from_: datetime = None,\n    to: datetime = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: None.\n        page: None.\n        user_ids: None.\n        column_ids: None.\n        group_ids: None.\n        item_ids: None.\n        from_: None.\n        to: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(**strip_kwargs(board_id=board_id,)).activity_logs(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            user_ids=user_ids,\n            column_ids=column_ids,\n            group_ids=group_ids,\n            item_ids=item_ids,\n            from_=from_,\n            to=to,\n        )\n    )\n\n    op_stack = (\n        \"archive_board\",\n        \"activity_logs\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"activity_logs\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_columns","title":"<code>archive_board_columns(board_id, monday_credentials, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_columns(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(**strip_kwargs(board_id=board_id,)).columns(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"archive_board\",\n        \"columns\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"columns\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_creator","title":"<code>archive_board_creator(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_creator(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"archive_board\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_groups","title":"<code>archive_board_groups(board_id, monday_credentials, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_groups(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(**strip_kwargs(board_id=board_id,)).groups(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"archive_board\",\n        \"groups\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"groups\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_items","title":"<code>archive_board_items(board_id, monday_credentials, ids=None, limit=None, page=1, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>None</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>newest_first</code> <code>bool</code> <p>None.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_items(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    limit: int = None,\n    page: int = 1,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        limit: None.\n        page: None.\n        newest_first: None.\n        exclude_nonactive: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(**strip_kwargs(board_id=board_id,)).items(\n        **strip_kwargs(\n            ids=ids,\n            limit=limit,\n            page=page,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    )\n\n    op_stack = (\n        \"archive_board\",\n        \"items\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"items\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_owner","title":"<code>archive_board_owner(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_owner(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).owner(**strip_kwargs())\n\n    op_stack = (\n        \"archive_board\",\n        \"owner\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"owner\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_owners","title":"<code>archive_board_owners(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_owners(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).owners(**strip_kwargs())\n\n    op_stack = (\n        \"archive_board\",\n        \"owners\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"owners\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_subscribers","title":"<code>archive_board_subscribers(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_subscribers(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"archive_board\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_tags","title":"<code>archive_board_tags(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_tags(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).tags(**strip_kwargs())\n\n    op_stack = (\n        \"archive_board\",\n        \"tags\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"tags\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_top_group","title":"<code>archive_board_top_group(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_top_group(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).top_group(**strip_kwargs())\n\n    op_stack = (\n        \"archive_board\",\n        \"top_group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"top_group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_updates","title":"<code>archive_board_updates(board_id, monday_credentials, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_updates(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(**strip_kwargs(board_id=board_id,)).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"archive_board\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_views","title":"<code>archive_board_views(board_id, monday_credentials, ids=None, type=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>type</code> <code>str</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_views(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    type: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        type: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(**strip_kwargs(board_id=board_id,)).views(\n        **strip_kwargs(\n            ids=ids,\n            type=type,\n        )\n    )\n\n    op_stack = (\n        \"archive_board\",\n        \"views\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"views\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_board_workspace","title":"<code>archive_board_workspace(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Archive a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_board_workspace(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).workspace(**strip_kwargs())\n\n    op_stack = (\n        \"archive_board\",\n        \"workspace\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_board\"][\"workspace\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_group","title":"<code>archive_group(board_id, group_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Archives a group in a specific board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_group(\n    board_id: int,\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archives a group in a specific board.\n\n    Args:\n        board_id: The board's unique identifier.\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_group(\n        **strip_kwargs(\n            board_id=board_id,\n            group_id=group_id,\n        )\n    )\n\n    op_stack = (\"archive_group\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_group_items","title":"<code>archive_group_items(board_id, group_id, monday_credentials, ids=None, limit=None, page=1, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archives a group in a specific board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>None</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>newest_first</code> <code>bool</code> <p>None.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_group_items(\n    board_id: int,\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    limit: int = None,\n    page: int = 1,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archives a group in a specific board.\n\n    Args:\n        board_id: The board's unique identifier.\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        limit: None.\n        page: None.\n        newest_first: None.\n        exclude_nonactive: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_group(\n        **strip_kwargs(\n            board_id=board_id,\n            group_id=group_id,\n        )\n    ).items(\n        **strip_kwargs(\n            ids=ids,\n            limit=limit,\n            page=page,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    )\n\n    op_stack = (\n        \"archive_group\",\n        \"items\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_group\"][\"items\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_item","title":"<code>archive_item(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_item(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    )\n\n    op_stack = (\"archive_item\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_item\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_item_assets","title":"<code>archive_item_assets(monday_credentials, item_id=None, assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>assets_source</code> <code>AssetsSource</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_item_assets(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        assets_source: None.\n        column_ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_item(**strip_kwargs(item_id=item_id,)).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"archive_item\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_item\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_item_board","title":"<code>archive_item_board(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_item_board(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"archive_item\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_item\"][\"board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_item_column_values","title":"<code>archive_item_column_values(monday_credentials, item_id=None, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_item_column_values(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_item(**strip_kwargs(item_id=item_id,)).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"archive_item\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_item\"][\"column_values\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_item_creator","title":"<code>archive_item_creator(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_item_creator(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"archive_item\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_item\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_item_group","title":"<code>archive_item_group(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_item_group(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"archive_item\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_item\"][\"group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_item_subitems","title":"<code>archive_item_subitems(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_item_subitems(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).subitems(**strip_kwargs())\n\n    op_stack = (\n        \"archive_item\",\n        \"subitems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_item\"][\"subitems\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_item_subscribers","title":"<code>archive_item_subscribers(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Archive an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_item_subscribers(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"archive_item\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_item\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.archive_item_updates","title":"<code>archive_item_updates(monday_credentials, item_id=None, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Archive an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def archive_item_updates(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Archive an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.archive_item(**strip_kwargs(item_id=item_id,)).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"archive_item\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"archive_item\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_column_metadata","title":"<code>change_column_metadata(column_id, board_id, monday_credentials, column_property=None, value=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change a column's properties.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>column_property</code> <code>ColumnProperty</code> <p>The property name of the column to be changed (title / description).</p> <code>None</code> <code>value</code> <code>str</code> <p>The new description of the column.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_column_metadata(\n    column_id: str,\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    column_property: graphql_schema.ColumnProperty = None,\n    value: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change a column's properties.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        column_property: The property name of the column to be changed (title /\n            description).\n        value: The new description of the column.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_column_metadata(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            column_property=column_property,\n            value=value,\n        )\n    )\n\n    op_stack = (\"change_column_metadata\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_column_metadata\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_column_title","title":"<code>change_column_title(column_id, board_id, title, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Change a column's title.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>title</code> <code>str</code> <p>The new title of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_column_title(\n    column_id: str,\n    board_id: int,\n    title: str,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change a column's title.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        title: The new title of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_column_title(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            title=title,\n        )\n    )\n\n    op_stack = (\"change_column_title\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_column_title\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_column_value","title":"<code>change_column_value(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>datetime</code> <p>The new value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_column_value(\n    column_id: str,\n    board_id: int,\n    value: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create Status/Dropdown labels if they're\n            missing. (Requires permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    )\n\n    op_stack = (\"change_column_value\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_column_value\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_column_value_assets","title":"<code>change_column_value_assets(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>datetime</code> <p>The new value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>assets_source</code> <code>AssetsSource</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_column_value_assets(\n    column_id: str,\n    board_id: int,\n    value: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create Status/Dropdown\n            labels if they're missing. (Requires permission to change\n            board structure).\n        assets_source: None.\n        column_ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"change_column_value\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_column_value\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_column_value_board","title":"<code>change_column_value_board(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>datetime</code> <p>The new value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_column_value_board(\n    column_id: str,\n    board_id: int,\n    value: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create Status/Dropdown\n            labels if they're missing. (Requires permission to change\n            board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"change_column_value\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_column_value\"][\"board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_column_value_column_values","title":"<code>change_column_value_column_values(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>datetime</code> <p>The new value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_column_value_column_values(\n    column_id: str,\n    board_id: int,\n    value: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create Status/Dropdown\n            labels if they're missing. (Requires permission to change\n            board structure).\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"change_column_value\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_column_value\"][\"column_values\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_column_value_creator","title":"<code>change_column_value_creator(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>datetime</code> <p>The new value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_column_value_creator(\n    column_id: str,\n    board_id: int,\n    value: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create Status/Dropdown\n            labels if they're missing. (Requires permission to change\n            board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"change_column_value\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_column_value\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_column_value_group","title":"<code>change_column_value_group(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>datetime</code> <p>The new value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_column_value_group(\n    column_id: str,\n    board_id: int,\n    value: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create Status/Dropdown\n            labels if they're missing. (Requires permission to change\n            board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"change_column_value\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_column_value\"][\"group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_column_value_subitems","title":"<code>change_column_value_subitems(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>datetime</code> <p>The new value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_column_value_subitems(\n    column_id: str,\n    board_id: int,\n    value: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create Status/Dropdown\n            labels if they're missing. (Requires permission to change\n            board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).subitems(**strip_kwargs())\n\n    op_stack = (\n        \"change_column_value\",\n        \"subitems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_column_value\"][\"subitems\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_column_value_subscribers","title":"<code>change_column_value_subscribers(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>datetime</code> <p>The new value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_column_value_subscribers(\n    column_id: str,\n    board_id: int,\n    value: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create Status/Dropdown\n            labels if they're missing. (Requires permission to change\n            board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"change_column_value\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_column_value\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_column_value_updates","title":"<code>change_column_value_updates(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>datetime</code> <p>The new value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_column_value_updates(\n    column_id: str,\n    board_id: int,\n    value: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create Status/Dropdown\n            labels if they're missing. (Requires permission to change\n            board structure).\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"change_column_value\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_column_value\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_multiple_column_values","title":"<code>change_multiple_column_values(board_id, column_values, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Changes the column values of a specific item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_values</code> <code>datetime</code> <p>The column values updates.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_multiple_column_values(\n    board_id: int,\n    column_values: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Changes the column values of a specific item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_values: The column values updates.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create Status/Dropdown labels if they're\n            missing. (Requires permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_values=column_values,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    )\n\n    op_stack = (\"change_multiple_column_values\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_multiple_column_values\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_multiple_column_values_assets","title":"<code>change_multiple_column_values_assets(board_id, column_values, monday_credentials, item_id=None, create_labels_if_missing=None, assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Changes the column values of a specific item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_values</code> <code>datetime</code> <p>The column values updates.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>assets_source</code> <code>AssetsSource</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_multiple_column_values_assets(\n    board_id: int,\n    column_values: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Changes the column values of a specific item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_values: The column values updates.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        assets_source: None.\n        column_ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_values=column_values,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"change_multiple_column_values\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_multiple_column_values\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_multiple_column_values_board","title":"<code>change_multiple_column_values_board(board_id, column_values, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Changes the column values of a specific item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_values</code> <code>datetime</code> <p>The column values updates.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_multiple_column_values_board(\n    board_id: int,\n    column_values: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Changes the column values of a specific item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_values: The column values updates.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_values=column_values,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"change_multiple_column_values\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_multiple_column_values\"][\"board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_multiple_column_values_column_values","title":"<code>change_multiple_column_values_column_values(board_id, column_values, monday_credentials, item_id=None, create_labels_if_missing=None, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Changes the column values of a specific item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_values</code> <code>datetime</code> <p>The column values updates.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_multiple_column_values_column_values(\n    board_id: int,\n    column_values: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Changes the column values of a specific item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_values: The column values updates.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_values=column_values,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"change_multiple_column_values\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_multiple_column_values\"][\"column_values\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_multiple_column_values_creator","title":"<code>change_multiple_column_values_creator(board_id, column_values, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Changes the column values of a specific item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_values</code> <code>datetime</code> <p>The column values updates.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_multiple_column_values_creator(\n    board_id: int,\n    column_values: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Changes the column values of a specific item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_values: The column values updates.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_values=column_values,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"change_multiple_column_values\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_multiple_column_values\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_multiple_column_values_group","title":"<code>change_multiple_column_values_group(board_id, column_values, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Changes the column values of a specific item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_values</code> <code>datetime</code> <p>The column values updates.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_multiple_column_values_group(\n    board_id: int,\n    column_values: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Changes the column values of a specific item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_values: The column values updates.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_values=column_values,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"change_multiple_column_values\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_multiple_column_values\"][\"group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_multiple_column_values_subitems","title":"<code>change_multiple_column_values_subitems(board_id, column_values, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Changes the column values of a specific item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_values</code> <code>datetime</code> <p>The column values updates.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_multiple_column_values_subitems(\n    board_id: int,\n    column_values: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Changes the column values of a specific item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_values: The column values updates.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_values=column_values,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).subitems(**strip_kwargs())\n\n    op_stack = (\n        \"change_multiple_column_values\",\n        \"subitems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_multiple_column_values\"][\"subitems\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_multiple_column_values_subscribers","title":"<code>change_multiple_column_values_subscribers(board_id, column_values, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Changes the column values of a specific item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_values</code> <code>datetime</code> <p>The column values updates.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_multiple_column_values_subscribers(\n    board_id: int,\n    column_values: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Changes the column values of a specific item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_values: The column values updates.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_values=column_values,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"change_multiple_column_values\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_multiple_column_values\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_multiple_column_values_updates","title":"<code>change_multiple_column_values_updates(board_id, column_values, monday_credentials, item_id=None, create_labels_if_missing=None, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Changes the column values of a specific item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>column_values</code> <code>datetime</code> <p>The column values updates.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_multiple_column_values_updates(\n    board_id: int,\n    column_values: datetime,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Changes the column values of a specific item.\n\n    Args:\n        board_id: The board's unique identifier.\n        column_values: The column values updates.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_multiple_column_values(\n        **strip_kwargs(\n            board_id=board_id,\n            column_values=column_values,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"change_multiple_column_values\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_multiple_column_values\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_simple_column_value","title":"<code>change_simple_column_value(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column with simple value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>str</code> <p>The new simple value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_simple_column_value(\n    column_id: str,\n    board_id: int,\n    value: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column with simple value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new simple value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create Status/Dropdown labels if they're\n            missing. (Requires permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_simple_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    )\n\n    op_stack = (\"change_simple_column_value\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_simple_column_value\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_simple_column_value_assets","title":"<code>change_simple_column_value_assets(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column with simple value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>str</code> <p>The new simple value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>assets_source</code> <code>AssetsSource</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_simple_column_value_assets(\n    column_id: str,\n    board_id: int,\n    value: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column with simple value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new simple value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        assets_source: None.\n        column_ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_simple_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"change_simple_column_value\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_simple_column_value\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_simple_column_value_board","title":"<code>change_simple_column_value_board(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column with simple value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>str</code> <p>The new simple value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_simple_column_value_board(\n    column_id: str,\n    board_id: int,\n    value: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column with simple value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new simple value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_simple_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"change_simple_column_value\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_simple_column_value\"][\"board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_simple_column_value_column_values","title":"<code>change_simple_column_value_column_values(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column with simple value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>str</code> <p>The new simple value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_simple_column_value_column_values(\n    column_id: str,\n    board_id: int,\n    value: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column with simple value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new simple value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_simple_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"change_simple_column_value\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_simple_column_value\"][\"column_values\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_simple_column_value_creator","title":"<code>change_simple_column_value_creator(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column with simple value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>str</code> <p>The new simple value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_simple_column_value_creator(\n    column_id: str,\n    board_id: int,\n    value: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column with simple value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new simple value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_simple_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"change_simple_column_value\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_simple_column_value\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_simple_column_value_group","title":"<code>change_simple_column_value_group(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column with simple value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>str</code> <p>The new simple value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_simple_column_value_group(\n    column_id: str,\n    board_id: int,\n    value: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column with simple value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new simple value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_simple_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"change_simple_column_value\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_simple_column_value\"][\"group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_simple_column_value_subitems","title":"<code>change_simple_column_value_subitems(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column with simple value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>str</code> <p>The new simple value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_simple_column_value_subitems(\n    column_id: str,\n    board_id: int,\n    value: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column with simple value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new simple value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_simple_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).subitems(**strip_kwargs())\n\n    op_stack = (\n        \"change_simple_column_value\",\n        \"subitems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_simple_column_value\"][\"subitems\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_simple_column_value_subscribers","title":"<code>change_simple_column_value_subscribers(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column with simple value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>str</code> <p>The new simple value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_simple_column_value_subscribers(\n    column_id: str,\n    board_id: int,\n    value: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column with simple value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new simple value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_simple_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"change_simple_column_value\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_simple_column_value\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.change_simple_column_value_updates","title":"<code>change_simple_column_value_updates(column_id, board_id, value, monday_credentials, item_id=None, create_labels_if_missing=None, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Change an item's column with simple value.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str</code> <p>The column's unique identifier.</p> required <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>value</code> <code>str</code> <p>The new simple value of the column.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def change_simple_column_value_updates(\n    column_id: str,\n    board_id: int,\n    value: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    create_labels_if_missing: bool = None,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Change an item's column with simple value.\n\n    Args:\n        column_id: The column's unique identifier.\n        board_id: The board's unique identifier.\n        value: The new simple value of the column.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        create_labels_if_missing: Create\n            Status/Dropdown labels if they're missing. (Requires\n            permission to change board structure).\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.change_simple_column_value(\n        **strip_kwargs(\n            column_id=column_id,\n            board_id=board_id,\n            value=value,\n            item_id=item_id,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"change_simple_column_value\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"change_simple_column_value\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.clear_item_updates","title":"<code>clear_item_updates(item_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Clear an item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def clear_item_updates(\n    item_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Clear an item's updates.\n\n    Args:\n        item_id: The item's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.clear_item_updates(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    )\n\n    op_stack = (\"clear_item_updates\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"clear_item_updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.clear_item_updates_assets","title":"<code>clear_item_updates_assets(item_id, monday_credentials, assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Clear an item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>assets_source</code> <code>AssetsSource</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def clear_item_updates_assets(\n    item_id: int,\n    monday_credentials: MondayCredentials,\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Clear an item's updates.\n\n    Args:\n        item_id: The item's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        assets_source: None.\n        column_ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.clear_item_updates(**strip_kwargs(item_id=item_id,)).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"clear_item_updates\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"clear_item_updates\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.clear_item_updates_board","title":"<code>clear_item_updates_board(item_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Clear an item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def clear_item_updates_board(\n    item_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Clear an item's updates.\n\n    Args:\n        item_id: The item's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.clear_item_updates(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"clear_item_updates\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"clear_item_updates\"][\"board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.clear_item_updates_column_values","title":"<code>clear_item_updates_column_values(item_id, monday_credentials, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Clear an item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def clear_item_updates_column_values(\n    item_id: int,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Clear an item's updates.\n\n    Args:\n        item_id: The item's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.clear_item_updates(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"clear_item_updates\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"clear_item_updates\"][\"column_values\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.clear_item_updates_creator","title":"<code>clear_item_updates_creator(item_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Clear an item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def clear_item_updates_creator(\n    item_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Clear an item's updates.\n\n    Args:\n        item_id: The item's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.clear_item_updates(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"clear_item_updates\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"clear_item_updates\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.clear_item_updates_group","title":"<code>clear_item_updates_group(item_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Clear an item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def clear_item_updates_group(\n    item_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Clear an item's updates.\n\n    Args:\n        item_id: The item's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.clear_item_updates(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"clear_item_updates\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"clear_item_updates\"][\"group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.clear_item_updates_subitems","title":"<code>clear_item_updates_subitems(item_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Clear an item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def clear_item_updates_subitems(\n    item_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Clear an item's updates.\n\n    Args:\n        item_id: The item's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.clear_item_updates(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).subitems(**strip_kwargs())\n\n    op_stack = (\n        \"clear_item_updates\",\n        \"subitems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"clear_item_updates\"][\"subitems\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.clear_item_updates_subscribers","title":"<code>clear_item_updates_subscribers(item_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Clear an item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def clear_item_updates_subscribers(\n    item_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Clear an item's updates.\n\n    Args:\n        item_id: The item's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.clear_item_updates(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"clear_item_updates\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"clear_item_updates\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.clear_item_updates_updates","title":"<code>clear_item_updates_updates(item_id, monday_credentials, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Clear an item's updates.</p> <p>Parameters:</p> Name Type Description Default <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def clear_item_updates_updates(\n    item_id: int,\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Clear an item's updates.\n\n    Args:\n        item_id: The item's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.clear_item_updates(**strip_kwargs(item_id=item_id,)).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"clear_item_updates\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"clear_item_updates\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.complexity","title":"<code>complexity(monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Get the complexity data of your mutations.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def complexity(\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get the complexity data of your mutations.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.complexity(**strip_kwargs())\n\n    op_stack = (\"complexity\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"complexity\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board","title":"<code>create_board(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    )\n\n    op_stack = (\"create_board\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_activity_logs","title":"<code>create_board_activity_logs(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, limit=25, page=1, user_ids=None, column_ids=None, group_ids=None, item_ids=None, from_=None, to=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>user_ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>group_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>item_ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>from_</code> <code>datetime</code> <p>None.</p> <code>None</code> <code>to</code> <code>datetime</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_activity_logs(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    limit: int = 25,\n    page: int = 1,\n    user_ids: Iterable[int] = None,\n    column_ids: Iterable[str] = None,\n    group_ids: Iterable[str] = None,\n    item_ids: Iterable[int] = None,\n    from_: datetime = None,\n    to: datetime = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        limit: None.\n        page: None.\n        user_ids: None.\n        column_ids: None.\n        group_ids: None.\n        item_ids: None.\n        from_: None.\n        to: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).activity_logs(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            user_ids=user_ids,\n            column_ids=column_ids,\n            group_ids=group_ids,\n            item_ids=item_ids,\n            from_=from_,\n            to=to,\n        )\n    )\n\n    op_stack = (\n        \"create_board\",\n        \"activity_logs\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"activity_logs\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_columns","title":"<code>create_board_columns(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_columns(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).columns(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"create_board\",\n        \"columns\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"columns\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_creator","title":"<code>create_board_creator(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_creator(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"create_board\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_groups","title":"<code>create_board_groups(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_groups(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).groups(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"create_board\",\n        \"groups\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"groups\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_items","title":"<code>create_board_items(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, ids=None, limit=None, page=1, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>None</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>newest_first</code> <code>bool</code> <p>None.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_items(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    ids: Iterable[int] = None,\n    limit: int = None,\n    page: int = 1,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        ids: None.\n        limit: None.\n        page: None.\n        newest_first: None.\n        exclude_nonactive: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).items(\n        **strip_kwargs(\n            ids=ids,\n            limit=limit,\n            page=page,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    )\n\n    op_stack = (\n        \"create_board\",\n        \"items\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"items\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_owner","title":"<code>create_board_owner(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_owner(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).owner(**strip_kwargs())\n\n    op_stack = (\n        \"create_board\",\n        \"owner\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"owner\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_owners","title":"<code>create_board_owners(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_owners(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).owners(**strip_kwargs())\n\n    op_stack = (\n        \"create_board\",\n        \"owners\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"owners\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_subscribers","title":"<code>create_board_subscribers(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_subscribers(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"create_board\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_tags","title":"<code>create_board_tags(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_tags(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).tags(**strip_kwargs())\n\n    op_stack = (\n        \"create_board\",\n        \"tags\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"tags\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_top_group","title":"<code>create_board_top_group(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_top_group(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).top_group(**strip_kwargs())\n\n    op_stack = (\n        \"create_board\",\n        \"top_group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"top_group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_updates","title":"<code>create_board_updates(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_updates(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"create_board\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_views","title":"<code>create_board_views(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, ids=None, type=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>type</code> <code>str</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_views(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    ids: Iterable[int] = None,\n    type: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        ids: None.\n        type: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).views(\n        **strip_kwargs(\n            ids=ids,\n            type=type,\n        )\n    )\n\n    op_stack = (\n        \"create_board\",\n        \"views\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"views\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_board_workspace","title":"<code>create_board_workspace(board_name, board_kind, monday_credentials, folder_id=None, workspace_id=None, template_id=None, board_owner_ids=None, board_subscriber_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new board.</p> <p>Parameters:</p> Name Type Description Default <code>board_name</code> <code>str</code> <p>The board's name.</p> required <code>board_kind</code> <code>BoardKind</code> <p>The board's kind (public / private / share).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>folder_id</code> <code>int</code> <p>Optional board folder id.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional workspace id.</p> <code>None</code> <code>template_id</code> <code>int</code> <p>Optional board template id.</p> <code>None</code> <code>board_owner_ids</code> <code>Iterable[int]</code> <p>Optional board owner ids.</p> <code>None</code> <code>board_subscriber_ids</code> <code>Iterable[int]</code> <p>Optional board subscriber ids.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_board_workspace(\n    board_name: str,\n    board_kind: graphql_schema.BoardKind,\n    monday_credentials: MondayCredentials,\n    folder_id: int = None,\n    workspace_id: int = None,\n    template_id: int = None,\n    board_owner_ids: Iterable[int] = None,\n    board_subscriber_ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new board.\n\n    Args:\n        board_name: The board's name.\n        board_kind: The board's kind (public / private / share).\n        monday_credentials: Credentials to use for authentication with Monday.\n        folder_id: Optional board folder id.\n        workspace_id: Optional workspace id.\n        template_id: Optional board template id.\n        board_owner_ids: Optional board owner ids.\n        board_subscriber_ids: Optional board subscriber ids.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_board(\n        **strip_kwargs(\n            board_name=board_name,\n            board_kind=board_kind,\n            folder_id=folder_id,\n            workspace_id=workspace_id,\n            template_id=template_id,\n            board_owner_ids=board_owner_ids,\n            board_subscriber_ids=board_subscriber_ids,\n        )\n    ).workspace(**strip_kwargs())\n\n    op_stack = (\n        \"create_board\",\n        \"workspace\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_board\"][\"workspace\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_column","title":"<code>create_column(board_id, title, monday_credentials, description=None, column_type=None, defaults=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new column in board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>title</code> <code>str</code> <p>The new column's title.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>description</code> <code>str</code> <p>The new column's description.</p> <code>None</code> <code>column_type</code> <code>ColumnType</code> <p>The type of column to create.</p> <code>None</code> <code>defaults</code> <code>datetime</code> <p>The new column's defaults.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_column(\n    board_id: int,\n    title: str,\n    monday_credentials: MondayCredentials,\n    description: str = None,\n    column_type: graphql_schema.ColumnType = None,\n    defaults: datetime = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new column in board.\n\n    Args:\n        board_id: The board's unique identifier.\n        title: The new column's title.\n        monday_credentials: Credentials to use for authentication with Monday.\n        description: The new column's description.\n        column_type: The type of column to create.\n        defaults: The new column's defaults.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_column(\n        **strip_kwargs(\n            board_id=board_id,\n            title=title,\n            description=description,\n            column_type=column_type,\n            defaults=defaults,\n        )\n    )\n\n    op_stack = (\"create_column\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_column\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_group","title":"<code>create_group(board_id, group_name, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Creates a new group in a specific board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>group_name</code> <code>str</code> <p>The name of the new group.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_group(\n    board_id: int,\n    group_name: str,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Creates a new group in a specific board.\n\n    Args:\n        board_id: The board's unique identifier.\n        group_name: The name of the new group.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_group(\n        **strip_kwargs(\n            board_id=board_id,\n            group_name=group_name,\n        )\n    )\n\n    op_stack = (\"create_group\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_group_items","title":"<code>create_group_items(board_id, group_name, monday_credentials, ids=None, limit=None, page=1, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>Creates a new group in a specific board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>group_name</code> <code>str</code> <p>The name of the new group.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>None</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>newest_first</code> <code>bool</code> <p>None.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_group_items(\n    board_id: int,\n    group_name: str,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    limit: int = None,\n    page: int = 1,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Creates a new group in a specific board.\n\n    Args:\n        board_id: The board's unique identifier.\n        group_name: The name of the new group.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        limit: None.\n        page: None.\n        newest_first: None.\n        exclude_nonactive: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_group(\n        **strip_kwargs(\n            board_id=board_id,\n            group_name=group_name,\n        )\n    ).items(\n        **strip_kwargs(\n            ids=ids,\n            limit=limit,\n            page=page,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    )\n\n    op_stack = (\n        \"create_group\",\n        \"items\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_group\"][\"items\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_item","title":"<code>create_item(board_id, monday_credentials, item_name=None, group_id=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_item(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    item_name: str = None,\n    group_id: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_name: The new item's name.\n        group_id: The group's unique identifier.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels if they're\n            missing. (Requires permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_item(\n        **strip_kwargs(\n            board_id=board_id,\n            item_name=item_name,\n            group_id=group_id,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    )\n\n    op_stack = (\"create_item\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_item\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_item_assets","title":"<code>create_item_assets(board_id, monday_credentials, item_name=None, group_id=None, column_values=None, create_labels_if_missing=None, assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>assets_source</code> <code>AssetsSource</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_item_assets(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    item_name: str = None,\n    group_id: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_name: The new item's name.\n        group_id: The group's unique identifier.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels if\n            they're missing. (Requires permission to change board\n            structure).\n        assets_source: None.\n        column_ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_item(\n        **strip_kwargs(\n            board_id=board_id,\n            item_name=item_name,\n            group_id=group_id,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"create_item\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_item\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_item_board","title":"<code>create_item_board(board_id, monday_credentials, item_name=None, group_id=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_item_board(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    item_name: str = None,\n    group_id: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_name: The new item's name.\n        group_id: The group's unique identifier.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels if\n            they're missing. (Requires permission to change board\n            structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_item(\n        **strip_kwargs(\n            board_id=board_id,\n            item_name=item_name,\n            group_id=group_id,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"create_item\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_item\"][\"board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_item_column_values","title":"<code>create_item_column_values(board_id, monday_credentials, item_name=None, group_id=None, column_values=None, create_labels_if_missing=None, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_item_column_values(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    item_name: str = None,\n    group_id: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_name: The new item's name.\n        group_id: The group's unique identifier.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels if\n            they're missing. (Requires permission to change board\n            structure).\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_item(\n        **strip_kwargs(\n            board_id=board_id,\n            item_name=item_name,\n            group_id=group_id,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"create_item\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_item\"][\"column_values\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_item_creator","title":"<code>create_item_creator(board_id, monday_credentials, item_name=None, group_id=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_item_creator(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    item_name: str = None,\n    group_id: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_name: The new item's name.\n        group_id: The group's unique identifier.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels if\n            they're missing. (Requires permission to change board\n            structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_item(\n        **strip_kwargs(\n            board_id=board_id,\n            item_name=item_name,\n            group_id=group_id,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"create_item\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_item\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_item_group","title":"<code>create_item_group(board_id, monday_credentials, item_name=None, group_id=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_item_group(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    item_name: str = None,\n    group_id: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_name: The new item's name.\n        group_id: The group's unique identifier.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels if\n            they're missing. (Requires permission to change board\n            structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_item(\n        **strip_kwargs(\n            board_id=board_id,\n            item_name=item_name,\n            group_id=group_id,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"create_item\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_item\"][\"group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_item_subitems","title":"<code>create_item_subitems(board_id, monday_credentials, item_name=None, group_id=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_item_subitems(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    item_name: str = None,\n    group_id: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_name: The new item's name.\n        group_id: The group's unique identifier.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels if\n            they're missing. (Requires permission to change board\n            structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_item(\n        **strip_kwargs(\n            board_id=board_id,\n            item_name=item_name,\n            group_id=group_id,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).subitems(**strip_kwargs())\n\n    op_stack = (\n        \"create_item\",\n        \"subitems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_item\"][\"subitems\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_item_subscribers","title":"<code>create_item_subscribers(board_id, monday_credentials, item_name=None, group_id=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_item_subscribers(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    item_name: str = None,\n    group_id: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_name: The new item's name.\n        group_id: The group's unique identifier.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels if\n            they're missing. (Requires permission to change board\n            structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_item(\n        **strip_kwargs(\n            board_id=board_id,\n            item_name=item_name,\n            group_id=group_id,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"create_item\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_item\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_item_updates","title":"<code>create_item_updates(board_id, monday_credentials, item_name=None, group_id=None, column_values=None, create_labels_if_missing=None, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_item_updates(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    item_name: str = None,\n    group_id: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_name: The new item's name.\n        group_id: The group's unique identifier.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels if\n            they're missing. (Requires permission to change board\n            structure).\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_item(\n        **strip_kwargs(\n            board_id=board_id,\n            item_name=item_name,\n            group_id=group_id,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"create_item\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_item\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_notification","title":"<code>create_notification(text, user_id, target_id, target_type, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new notification.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The notification text.</p> required <code>user_id</code> <code>int</code> <p>The user's unique identifier.</p> required <code>target_id</code> <code>int</code> <p>The target's unique identifier.</p> required <code>target_type</code> <code>NotificationTargetType</code> <p>The target's type (Project / Post).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_notification(\n    text: str,\n    user_id: int,\n    target_id: int,\n    target_type: graphql_schema.NotificationTargetType,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new notification.\n\n    Args:\n        text: The notification text.\n        user_id: The user's unique identifier.\n        target_id: The target's unique identifier.\n        target_type: The target's type (Project / Post).\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_notification(\n        **strip_kwargs(\n            text=text,\n            user_id=user_id,\n            target_id=target_id,\n            target_type=target_type,\n        )\n    )\n\n    op_stack = (\"create_notification\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_notification\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_or_get_tag","title":"<code>create_or_get_tag(monday_credentials, tag_name=None, board_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new tag or get it if it already exists.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>tag_name</code> <code>str</code> <p>The new tag's name.</p> <code>None</code> <code>board_id</code> <code>int</code> <p>The private board id to create the tag at (not needed for public boards).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_or_get_tag(\n    monday_credentials: MondayCredentials,\n    tag_name: str = None,\n    board_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new tag or get it if it already exists.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        tag_name: The new tag's name.\n        board_id: The private board id to create the tag at (not needed for\n            public boards).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_or_get_tag(\n        **strip_kwargs(\n            tag_name=tag_name,\n            board_id=board_id,\n        )\n    )\n\n    op_stack = (\"create_or_get_tag\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_or_get_tag\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_subitem","title":"<code>create_subitem(monday_credentials, parent_item_id=None, item_name=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create subitem.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>parent_item_id</code> <code>int</code> <p>The parent item's unique identifier.</p> <code>None</code> <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_subitem(\n    monday_credentials: MondayCredentials,\n    parent_item_id: int = None,\n    item_name: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create subitem.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        parent_item_id: The parent item's unique identifier.\n        item_name: The new item's name.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels if they're\n            missing. (Requires permission to change board structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_subitem(\n        **strip_kwargs(\n            parent_item_id=parent_item_id,\n            item_name=item_name,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    )\n\n    op_stack = (\"create_subitem\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_subitem\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_subitem_assets","title":"<code>create_subitem_assets(monday_credentials, parent_item_id=None, item_name=None, column_values=None, create_labels_if_missing=None, assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create subitem.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>parent_item_id</code> <code>int</code> <p>The parent item's unique identifier.</p> <code>None</code> <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>assets_source</code> <code>AssetsSource</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_subitem_assets(\n    monday_credentials: MondayCredentials,\n    parent_item_id: int = None,\n    item_name: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create subitem.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        parent_item_id: The parent item's unique identifier.\n        item_name: The new item's name.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels\n            if they're missing. (Requires permission to change board\n            structure).\n        assets_source: None.\n        column_ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_subitem(\n        **strip_kwargs(\n            parent_item_id=parent_item_id,\n            item_name=item_name,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"create_subitem\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_subitem\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_subitem_board","title":"<code>create_subitem_board(monday_credentials, parent_item_id=None, item_name=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create subitem.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>parent_item_id</code> <code>int</code> <p>The parent item's unique identifier.</p> <code>None</code> <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_subitem_board(\n    monday_credentials: MondayCredentials,\n    parent_item_id: int = None,\n    item_name: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create subitem.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        parent_item_id: The parent item's unique identifier.\n        item_name: The new item's name.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels\n            if they're missing. (Requires permission to change board\n            structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_subitem(\n        **strip_kwargs(\n            parent_item_id=parent_item_id,\n            item_name=item_name,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"create_subitem\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_subitem\"][\"board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_subitem_column_values","title":"<code>create_subitem_column_values(monday_credentials, parent_item_id=None, item_name=None, column_values=None, create_labels_if_missing=None, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create subitem.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>parent_item_id</code> <code>int</code> <p>The parent item's unique identifier.</p> <code>None</code> <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_subitem_column_values(\n    monday_credentials: MondayCredentials,\n    parent_item_id: int = None,\n    item_name: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create subitem.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        parent_item_id: The parent item's unique identifier.\n        item_name: The new item's name.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels\n            if they're missing. (Requires permission to change board\n            structure).\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_subitem(\n        **strip_kwargs(\n            parent_item_id=parent_item_id,\n            item_name=item_name,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"create_subitem\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_subitem\"][\"column_values\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_subitem_creator","title":"<code>create_subitem_creator(monday_credentials, parent_item_id=None, item_name=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create subitem.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>parent_item_id</code> <code>int</code> <p>The parent item's unique identifier.</p> <code>None</code> <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_subitem_creator(\n    monday_credentials: MondayCredentials,\n    parent_item_id: int = None,\n    item_name: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create subitem.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        parent_item_id: The parent item's unique identifier.\n        item_name: The new item's name.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels\n            if they're missing. (Requires permission to change board\n            structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_subitem(\n        **strip_kwargs(\n            parent_item_id=parent_item_id,\n            item_name=item_name,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"create_subitem\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_subitem\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_subitem_group","title":"<code>create_subitem_group(monday_credentials, parent_item_id=None, item_name=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create subitem.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>parent_item_id</code> <code>int</code> <p>The parent item's unique identifier.</p> <code>None</code> <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_subitem_group(\n    monday_credentials: MondayCredentials,\n    parent_item_id: int = None,\n    item_name: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create subitem.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        parent_item_id: The parent item's unique identifier.\n        item_name: The new item's name.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels\n            if they're missing. (Requires permission to change board\n            structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_subitem(\n        **strip_kwargs(\n            parent_item_id=parent_item_id,\n            item_name=item_name,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"create_subitem\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_subitem\"][\"group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_subitem_subitems","title":"<code>create_subitem_subitems(monday_credentials, parent_item_id=None, item_name=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create subitem.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>parent_item_id</code> <code>int</code> <p>The parent item's unique identifier.</p> <code>None</code> <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_subitem_subitems(\n    monday_credentials: MondayCredentials,\n    parent_item_id: int = None,\n    item_name: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create subitem.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        parent_item_id: The parent item's unique identifier.\n        item_name: The new item's name.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels\n            if they're missing. (Requires permission to change board\n            structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_subitem(\n        **strip_kwargs(\n            parent_item_id=parent_item_id,\n            item_name=item_name,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).subitems(**strip_kwargs())\n\n    op_stack = (\n        \"create_subitem\",\n        \"subitems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_subitem\"][\"subitems\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_subitem_subscribers","title":"<code>create_subitem_subscribers(monday_credentials, parent_item_id=None, item_name=None, column_values=None, create_labels_if_missing=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create subitem.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>parent_item_id</code> <code>int</code> <p>The parent item's unique identifier.</p> <code>None</code> <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_subitem_subscribers(\n    monday_credentials: MondayCredentials,\n    parent_item_id: int = None,\n    item_name: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create subitem.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        parent_item_id: The parent item's unique identifier.\n        item_name: The new item's name.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels\n            if they're missing. (Requires permission to change board\n            structure).\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_subitem(\n        **strip_kwargs(\n            parent_item_id=parent_item_id,\n            item_name=item_name,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"create_subitem\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_subitem\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_subitem_updates","title":"<code>create_subitem_updates(monday_credentials, parent_item_id=None, item_name=None, column_values=None, create_labels_if_missing=None, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Create subitem.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>parent_item_id</code> <code>int</code> <p>The parent item's unique identifier.</p> <code>None</code> <code>item_name</code> <code>str</code> <p>The new item's name.</p> <code>None</code> <code>column_values</code> <code>datetime</code> <p>The column values of the new item.</p> <code>None</code> <code>create_labels_if_missing</code> <code>bool</code> <p>Create Status/Dropdown labels if they're missing. (Requires permission to change board structure).</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_subitem_updates(\n    monday_credentials: MondayCredentials,\n    parent_item_id: int = None,\n    item_name: str = None,\n    column_values: datetime = None,\n    create_labels_if_missing: bool = None,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create subitem.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        parent_item_id: The parent item's unique identifier.\n        item_name: The new item's name.\n        column_values: The column values of the new item.\n        create_labels_if_missing: Create Status/Dropdown labels\n            if they're missing. (Requires permission to change board\n            structure).\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_subitem(\n        **strip_kwargs(\n            parent_item_id=parent_item_id,\n            item_name=item_name,\n            column_values=column_values,\n            create_labels_if_missing=create_labels_if_missing,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"create_subitem\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_subitem\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_update","title":"<code>create_update(body, monday_credentials, item_id=None, parent_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new update.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>str</code> <p>The update text.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>parent_id</code> <code>int</code> <p>The parent post identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_update(\n    body: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    parent_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new update.\n\n    Args:\n        body: The update text.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        parent_id: The parent post identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_update(\n        **strip_kwargs(\n            body=body,\n            item_id=item_id,\n            parent_id=parent_id,\n        )\n    )\n\n    op_stack = (\"create_update\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_update\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_update_assets","title":"<code>create_update_assets(body, monday_credentials, item_id=None, parent_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new update.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>str</code> <p>The update text.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>parent_id</code> <code>int</code> <p>The parent post identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_update_assets(\n    body: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    parent_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new update.\n\n    Args:\n        body: The update text.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        parent_id: The parent post identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_update(\n        **strip_kwargs(\n            body=body,\n            item_id=item_id,\n            parent_id=parent_id,\n        )\n    ).assets(**strip_kwargs())\n\n    op_stack = (\n        \"create_update\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_update\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_update_creator","title":"<code>create_update_creator(body, monday_credentials, item_id=None, parent_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new update.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>str</code> <p>The update text.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>parent_id</code> <code>int</code> <p>The parent post identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_update_creator(\n    body: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    parent_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new update.\n\n    Args:\n        body: The update text.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        parent_id: The parent post identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_update(\n        **strip_kwargs(\n            body=body,\n            item_id=item_id,\n            parent_id=parent_id,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"create_update\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_update\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_update_replies","title":"<code>create_update_replies(body, monday_credentials, item_id=None, parent_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new update.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>str</code> <p>The update text.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>parent_id</code> <code>int</code> <p>The parent post identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_update_replies(\n    body: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    parent_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new update.\n\n    Args:\n        body: The update text.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        parent_id: The parent post identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_update(\n        **strip_kwargs(\n            body=body,\n            item_id=item_id,\n            parent_id=parent_id,\n        )\n    ).replies(**strip_kwargs())\n\n    op_stack = (\n        \"create_update\",\n        \"replies\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_update\"][\"replies\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_webhook","title":"<code>create_webhook(board_id, url, event, monday_credentials, config=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new webhook.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>url</code> <code>str</code> <p>The webhook URL.</p> required <code>event</code> <code>WebhookEventType</code> <p>The event to listen to (incoming_notification / change_column_value / change_status_column_value / change_subitem_column_value / change_specific_column_value / create_item / create_subitem / create_update / create_subitem_update / change_subitem_name / change_name / when_date_arrived / item_deleted / subitem_deleted / item_archived / subitem_archived).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>config</code> <code>datetime</code> <p>The webhook config.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_webhook(\n    board_id: int,\n    url: str,\n    event: graphql_schema.WebhookEventType,\n    monday_credentials: MondayCredentials,\n    config: datetime = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new webhook.\n\n    Args:\n        board_id: The board's unique identifier.\n        url: The webhook URL.\n        event: The event to listen to (incoming_notification /\n            change_column_value / change_status_column_value /\n            change_subitem_column_value / change_specific_column_value /\n            create_item / create_subitem / create_update /\n            create_subitem_update / change_subitem_name / change_name /\n            when_date_arrived / item_deleted / subitem_deleted /\n            item_archived / subitem_archived).\n        monday_credentials: Credentials to use for authentication with Monday.\n        config: The webhook config.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_webhook(\n        **strip_kwargs(\n            board_id=board_id,\n            url=url,\n            event=event,\n            config=config,\n        )\n    )\n\n    op_stack = (\"create_webhook\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_webhook\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_workspace","title":"<code>create_workspace(name, kind, monday_credentials, description=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new workspace.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The Workspace's name.</p> required <code>kind</code> <code>WorkspaceKind</code> <p>The workspace's kind (open / closed).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>description</code> <code>str</code> <p>The Workspace's description.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_workspace(\n    name: str,\n    kind: graphql_schema.WorkspaceKind,\n    monday_credentials: MondayCredentials,\n    description: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new workspace.\n\n    Args:\n        name: The Workspace's name.\n        kind: The workspace's kind (open / closed).\n        monday_credentials: Credentials to use for authentication with Monday.\n        description: The Workspace's description.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_workspace(\n        **strip_kwargs(\n            name=name,\n            kind=kind,\n            description=description,\n        )\n    )\n\n    op_stack = (\"create_workspace\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_workspace\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.create_workspace_account_product","title":"<code>create_workspace_account_product(name, kind, monday_credentials, description=None, return_fields=None)</code>  <code>async</code>","text":"<p>Create a new workspace.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The Workspace's name.</p> required <code>kind</code> <code>WorkspaceKind</code> <p>The workspace's kind (open / closed).</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>description</code> <code>str</code> <p>The Workspace's description.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def create_workspace_account_product(\n    name: str,\n    kind: graphql_schema.WorkspaceKind,\n    monday_credentials: MondayCredentials,\n    description: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new workspace.\n\n    Args:\n        name: The Workspace's name.\n        kind: The workspace's kind (open / closed).\n        monday_credentials: Credentials to use for authentication with Monday.\n        description: The Workspace's description.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.create_workspace(\n        **strip_kwargs(\n            name=name,\n            kind=kind,\n            description=description,\n        )\n    ).account_product(**strip_kwargs())\n\n    op_stack = (\n        \"create_workspace\",\n        \"account_product\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"create_workspace\"][\"account_product\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board","title":"<code>delete_board(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    )\n\n    op_stack = (\"delete_board\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_activity_logs","title":"<code>delete_board_activity_logs(board_id, monday_credentials, limit=25, page=1, user_ids=None, column_ids=None, group_ids=None, item_ids=None, from_=None, to=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>user_ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>group_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>item_ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>from_</code> <code>datetime</code> <p>None.</p> <code>None</code> <code>to</code> <code>datetime</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_activity_logs(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    user_ids: Iterable[int] = None,\n    column_ids: Iterable[str] = None,\n    group_ids: Iterable[str] = None,\n    item_ids: Iterable[int] = None,\n    from_: datetime = None,\n    to: datetime = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: None.\n        page: None.\n        user_ids: None.\n        column_ids: None.\n        group_ids: None.\n        item_ids: None.\n        from_: None.\n        to: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(**strip_kwargs(board_id=board_id,)).activity_logs(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n            user_ids=user_ids,\n            column_ids=column_ids,\n            group_ids=group_ids,\n            item_ids=item_ids,\n            from_=from_,\n            to=to,\n        )\n    )\n\n    op_stack = (\n        \"delete_board\",\n        \"activity_logs\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"activity_logs\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_columns","title":"<code>delete_board_columns(board_id, monday_credentials, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_columns(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(**strip_kwargs(board_id=board_id,)).columns(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"delete_board\",\n        \"columns\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"columns\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_creator","title":"<code>delete_board_creator(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_creator(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"delete_board\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_groups","title":"<code>delete_board_groups(board_id, monday_credentials, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_groups(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(**strip_kwargs(board_id=board_id,)).groups(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"delete_board\",\n        \"groups\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"groups\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_items","title":"<code>delete_board_items(board_id, monday_credentials, ids=None, limit=None, page=1, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>None</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>newest_first</code> <code>bool</code> <p>None.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_items(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    limit: int = None,\n    page: int = 1,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        limit: None.\n        page: None.\n        newest_first: None.\n        exclude_nonactive: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(**strip_kwargs(board_id=board_id,)).items(\n        **strip_kwargs(\n            ids=ids,\n            limit=limit,\n            page=page,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    )\n\n    op_stack = (\n        \"delete_board\",\n        \"items\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"items\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_owner","title":"<code>delete_board_owner(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_owner(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).owner(**strip_kwargs())\n\n    op_stack = (\n        \"delete_board\",\n        \"owner\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"owner\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_owners","title":"<code>delete_board_owners(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_owners(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).owners(**strip_kwargs())\n\n    op_stack = (\n        \"delete_board\",\n        \"owners\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"owners\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_subscribers","title":"<code>delete_board_subscribers(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_subscribers(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"delete_board\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_tags","title":"<code>delete_board_tags(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_tags(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).tags(**strip_kwargs())\n\n    op_stack = (\n        \"delete_board\",\n        \"tags\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"tags\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_top_group","title":"<code>delete_board_top_group(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_top_group(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).top_group(**strip_kwargs())\n\n    op_stack = (\n        \"delete_board\",\n        \"top_group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"top_group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_updates","title":"<code>delete_board_updates(board_id, monday_credentials, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_updates(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(**strip_kwargs(board_id=board_id,)).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"delete_board\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_views","title":"<code>delete_board_views(board_id, monday_credentials, ids=None, type=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>type</code> <code>str</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_views(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    type: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        type: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(**strip_kwargs(board_id=board_id,)).views(\n        **strip_kwargs(\n            ids=ids,\n            type=type,\n        )\n    )\n\n    op_stack = (\n        \"delete_board\",\n        \"views\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"views\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_board_workspace","title":"<code>delete_board_workspace(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_board_workspace(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_board(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    ).workspace(**strip_kwargs())\n\n    op_stack = (\n        \"delete_board\",\n        \"workspace\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_board\"][\"workspace\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_group","title":"<code>delete_group(board_id, group_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Deletes a group in a specific board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_group(\n    board_id: int,\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Deletes a group in a specific board.\n\n    Args:\n        board_id: The board's unique identifier.\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_group(\n        **strip_kwargs(\n            board_id=board_id,\n            group_id=group_id,\n        )\n    )\n\n    op_stack = (\"delete_group\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_group_items","title":"<code>delete_group_items(board_id, group_id, monday_credentials, ids=None, limit=None, page=1, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>Deletes a group in a specific board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>None</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>newest_first</code> <code>bool</code> <p>None.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_group_items(\n    board_id: int,\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    limit: int = None,\n    page: int = 1,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Deletes a group in a specific board.\n\n    Args:\n        board_id: The board's unique identifier.\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        limit: None.\n        page: None.\n        newest_first: None.\n        exclude_nonactive: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_group(\n        **strip_kwargs(\n            board_id=board_id,\n            group_id=group_id,\n        )\n    ).items(\n        **strip_kwargs(\n            ids=ids,\n            limit=limit,\n            page=page,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    )\n\n    op_stack = (\n        \"delete_group\",\n        \"items\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_group\"][\"items\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_item","title":"<code>delete_item(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_item(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    )\n\n    op_stack = (\"delete_item\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_item\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_item_assets","title":"<code>delete_item_assets(monday_credentials, item_id=None, assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>assets_source</code> <code>AssetsSource</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_item_assets(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        assets_source: None.\n        column_ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_item(**strip_kwargs(item_id=item_id,)).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"delete_item\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_item\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_item_board","title":"<code>delete_item_board(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_item_board(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"delete_item\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_item\"][\"board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_item_column_values","title":"<code>delete_item_column_values(monday_credentials, item_id=None, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_item_column_values(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_item(**strip_kwargs(item_id=item_id,)).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"delete_item\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_item\"][\"column_values\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_item_creator","title":"<code>delete_item_creator(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_item_creator(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"delete_item\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_item\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_item_group","title":"<code>delete_item_group(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_item_group(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"delete_item\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_item\"][\"group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_item_subitems","title":"<code>delete_item_subitems(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_item_subitems(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).subitems(**strip_kwargs())\n\n    op_stack = (\n        \"delete_item\",\n        \"subitems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_item\"][\"subitems\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_item_subscribers","title":"<code>delete_item_subscribers(monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_item_subscribers(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_item(\n        **strip_kwargs(\n            item_id=item_id,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"delete_item\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_item\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_item_updates","title":"<code>delete_item_updates(monday_credentials, item_id=None, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an item.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_item_updates(\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an item.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_item(**strip_kwargs(item_id=item_id,)).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"delete_item\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_item\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_subscribers_from_board","title":"<code>delete_subscribers_from_board(board_id, user_ids, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Remove subscribers from the board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to unsubscribe from a board.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_subscribers_from_board(\n    board_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Remove subscribers from the board.\n\n    Args:\n        board_id: The board's unique identifier.\n        user_ids: User ids to unsubscribe from a board.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_subscribers_from_board(\n        **strip_kwargs(\n            board_id=board_id,\n            user_ids=user_ids,\n        )\n    )\n\n    op_stack = (\"delete_subscribers_from_board\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_subscribers_from_board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_subscribers_from_board_account","title":"<code>delete_subscribers_from_board_account(board_id, user_ids, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Remove subscribers from the board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to unsubscribe from a board.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_subscribers_from_board_account(\n    board_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Remove subscribers from the board.\n\n    Args:\n        board_id: The board's unique identifier.\n        user_ids: User ids to unsubscribe from a\n            board.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_subscribers_from_board(\n        **strip_kwargs(\n            board_id=board_id,\n            user_ids=user_ids,\n        )\n    ).account(**strip_kwargs())\n\n    op_stack = (\n        \"delete_subscribers_from_board\",\n        \"account\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_subscribers_from_board\"][\"account\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_subscribers_from_board_teams","title":"<code>delete_subscribers_from_board_teams(board_id, user_ids, monday_credentials, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Remove subscribers from the board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to unsubscribe from a board.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_subscribers_from_board_teams(\n    board_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Remove subscribers from the board.\n\n    Args:\n        board_id: The board's unique identifier.\n        user_ids: User ids to unsubscribe from a\n            board.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_subscribers_from_board(\n        **strip_kwargs(\n            board_id=board_id,\n            user_ids=user_ids,\n        )\n    ).teams(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"delete_subscribers_from_board\",\n        \"teams\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_subscribers_from_board\"][\"teams\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_teams_from_workspace","title":"<code>delete_teams_from_workspace(workspace_id, team_ids, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete teams from a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>int</code> <p>The workspace's unique identifier.</p> required <code>team_ids</code> <code>Iterable[int]</code> <p>Team ids to unsubscribe from a workspace.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_teams_from_workspace(\n    workspace_id: int,\n    team_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete teams from a workspace.\n\n    Args:\n        workspace_id: The workspace's unique identifier.\n        team_ids: Team ids to unsubscribe from a workspace.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_teams_from_workspace(\n        **strip_kwargs(\n            workspace_id=workspace_id,\n            team_ids=team_ids,\n        )\n    )\n\n    op_stack = (\"delete_teams_from_workspace\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_teams_from_workspace\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_teams_from_workspace_users","title":"<code>delete_teams_from_workspace_users(workspace_id, team_ids, monday_credentials, ids=None, kind=None, newest_first=None, limit=None, emails=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete teams from a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>int</code> <p>The workspace's unique identifier.</p> required <code>team_ids</code> <code>Iterable[int]</code> <p>Team ids to unsubscribe from a workspace.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>kind</code> <code>UserKind</code> <p>None.</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>None</code> <code>emails</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_teams_from_workspace_users(\n    workspace_id: int,\n    team_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    kind: graphql_schema.UserKind = None,\n    newest_first: bool = None,\n    limit: int = None,\n    emails: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete teams from a workspace.\n\n    Args:\n        workspace_id: The workspace's unique\n            identifier.\n        team_ids: Team ids to unsubscribe from a\n            workspace.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        kind: None.\n        newest_first: None.\n        limit: None.\n        emails: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_teams_from_workspace(\n        **strip_kwargs(\n            workspace_id=workspace_id,\n            team_ids=team_ids,\n        )\n    ).users(\n        **strip_kwargs(\n            ids=ids,\n            kind=kind,\n            newest_first=newest_first,\n            limit=limit,\n            emails=emails,\n        )\n    )\n\n    op_stack = (\n        \"delete_teams_from_workspace\",\n        \"users\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_teams_from_workspace\"][\"users\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_update","title":"<code>delete_update(id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an update.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The update's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_update(\n    id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an update.\n\n    Args:\n        id: The update's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_update(\n        **strip_kwargs(\n            id=id,\n        )\n    )\n\n    op_stack = (\"delete_update\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_update\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_update_assets","title":"<code>delete_update_assets(id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an update.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The update's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_update_assets(\n    id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an update.\n\n    Args:\n        id: The update's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_update(\n        **strip_kwargs(\n            id=id,\n        )\n    ).assets(**strip_kwargs())\n\n    op_stack = (\n        \"delete_update\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_update\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_update_creator","title":"<code>delete_update_creator(id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an update.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The update's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_update_creator(\n    id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an update.\n\n    Args:\n        id: The update's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_update(\n        **strip_kwargs(\n            id=id,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"delete_update\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_update\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_update_replies","title":"<code>delete_update_replies(id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete an update.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The update's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_update_replies(\n    id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete an update.\n\n    Args:\n        id: The update's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_update(\n        **strip_kwargs(\n            id=id,\n        )\n    ).replies(**strip_kwargs())\n\n    op_stack = (\n        \"delete_update\",\n        \"replies\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_update\"][\"replies\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_users_from_workspace","title":"<code>delete_users_from_workspace(workspace_id, user_ids, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete users from a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>int</code> <p>The workspace's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to unsubscribe from a workspace.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_users_from_workspace(\n    workspace_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete users from a workspace.\n\n    Args:\n        workspace_id: The workspace's unique identifier.\n        user_ids: User ids to unsubscribe from a workspace.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_users_from_workspace(\n        **strip_kwargs(\n            workspace_id=workspace_id,\n            user_ids=user_ids,\n        )\n    )\n\n    op_stack = (\"delete_users_from_workspace\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_users_from_workspace\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_users_from_workspace_account","title":"<code>delete_users_from_workspace_account(workspace_id, user_ids, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete users from a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>int</code> <p>The workspace's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to unsubscribe from a workspace.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_users_from_workspace_account(\n    workspace_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete users from a workspace.\n\n    Args:\n        workspace_id: The workspace's unique\n            identifier.\n        user_ids: User ids to unsubscribe from a\n            workspace.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_users_from_workspace(\n        **strip_kwargs(\n            workspace_id=workspace_id,\n            user_ids=user_ids,\n        )\n    ).account(**strip_kwargs())\n\n    op_stack = (\n        \"delete_users_from_workspace\",\n        \"account\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_users_from_workspace\"][\"account\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_users_from_workspace_teams","title":"<code>delete_users_from_workspace_teams(workspace_id, user_ids, monday_credentials, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Delete users from a workspace.</p> <p>Parameters:</p> Name Type Description Default <code>workspace_id</code> <code>int</code> <p>The workspace's unique identifier.</p> required <code>user_ids</code> <code>Iterable[int]</code> <p>User ids to unsubscribe from a workspace.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_users_from_workspace_teams(\n    workspace_id: int,\n    user_ids: Iterable[int],\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete users from a workspace.\n\n    Args:\n        workspace_id: The workspace's unique\n            identifier.\n        user_ids: User ids to unsubscribe from a\n            workspace.\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_users_from_workspace(\n        **strip_kwargs(\n            workspace_id=workspace_id,\n            user_ids=user_ids,\n        )\n    ).teams(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"delete_users_from_workspace\",\n        \"teams\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_users_from_workspace\"][\"teams\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.delete_webhook","title":"<code>delete_webhook(id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Delete a new webhook.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The webhook's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def delete_webhook(\n    id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Delete a new webhook.\n\n    Args:\n        id: The webhook's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.delete_webhook(\n        **strip_kwargs(\n            id=id,\n        )\n    )\n\n    op_stack = (\"delete_webhook\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"delete_webhook\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_board","title":"<code>duplicate_board(board_id, duplicate_type, monday_credentials, board_name=None, workspace_id=None, folder_id=None, keep_subscribers=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>duplicate_type</code> <code>DuplicateBoardType</code> <p>The duplication type.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>board_name</code> <code>str</code> <p>Optional the new board's name. If omitted then automaticlly generated.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional destination workspace. Defaults to the original board workspace.</p> <code>None</code> <code>folder_id</code> <code>int</code> <p>Optional destination folder in destionation workspace. Defaults to the original board folder.</p> <code>None</code> <code>keep_subscribers</code> <code>bool</code> <p>Duplicate the subscribers to the new board. Defaults to false.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_board(\n    board_id: int,\n    duplicate_type: graphql_schema.DuplicateBoardType,\n    monday_credentials: MondayCredentials,\n    board_name: str = None,\n    workspace_id: int = None,\n    folder_id: int = None,\n    keep_subscribers: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        duplicate_type: The duplication type.\n        monday_credentials: Credentials to use for authentication with Monday.\n        board_name: Optional the new board's name. If omitted then automaticlly\n            generated.\n        workspace_id: Optional destination workspace. Defaults to the original\n            board workspace.\n        folder_id: Optional destination folder in destionation workspace.\n            Defaults to the original board folder.\n        keep_subscribers: Duplicate the subscribers to the new board. Defaults\n            to false.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_board(\n        **strip_kwargs(\n            board_id=board_id,\n            duplicate_type=duplicate_type,\n            board_name=board_name,\n            workspace_id=workspace_id,\n            folder_id=folder_id,\n            keep_subscribers=keep_subscribers,\n        )\n    )\n\n    op_stack = (\"duplicate_board\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_board_board","title":"<code>duplicate_board_board(board_id, duplicate_type, monday_credentials, board_name=None, workspace_id=None, folder_id=None, keep_subscribers=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate a board.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>duplicate_type</code> <code>DuplicateBoardType</code> <p>The duplication type.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>board_name</code> <code>str</code> <p>Optional the new board's name. If omitted then automaticlly generated.</p> <code>None</code> <code>workspace_id</code> <code>int</code> <p>Optional destination workspace. Defaults to the original board workspace.</p> <code>None</code> <code>folder_id</code> <code>int</code> <p>Optional destination folder in destionation workspace. Defaults to the original board folder.</p> <code>None</code> <code>keep_subscribers</code> <code>bool</code> <p>Duplicate the subscribers to the new board. Defaults to false.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_board_board(\n    board_id: int,\n    duplicate_type: graphql_schema.DuplicateBoardType,\n    monday_credentials: MondayCredentials,\n    board_name: str = None,\n    workspace_id: int = None,\n    folder_id: int = None,\n    keep_subscribers: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate a board.\n\n    Args:\n        board_id: The board's unique identifier.\n        duplicate_type: The duplication type.\n        monday_credentials: Credentials to use for authentication with Monday.\n        board_name: Optional the new board's name. If omitted\n            then automaticlly generated.\n        workspace_id: Optional destination workspace. Defaults\n            to the original board workspace.\n        folder_id: Optional destination folder in destionation\n            workspace. Defaults to the original board folder.\n        keep_subscribers: Duplicate the subscribers to the new\n            board. Defaults to false.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_board(\n        **strip_kwargs(\n            board_id=board_id,\n            duplicate_type=duplicate_type,\n            board_name=board_name,\n            workspace_id=workspace_id,\n            folder_id=folder_id,\n            keep_subscribers=keep_subscribers,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"duplicate_board\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_board\"][\"board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_group","title":"<code>duplicate_group(board_id, group_id, monday_credentials, add_to_top=None, group_title=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate a group.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>add_to_top</code> <code>bool</code> <p>Should the new group be added to the top.</p> <code>None</code> <code>group_title</code> <code>str</code> <p>The group's title.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_group(\n    board_id: int,\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    add_to_top: bool = None,\n    group_title: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate a group.\n\n    Args:\n        board_id: The board's unique identifier.\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        add_to_top: Should the new group be added to the top.\n        group_title: The group's title.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_group(\n        **strip_kwargs(\n            board_id=board_id,\n            group_id=group_id,\n            add_to_top=add_to_top,\n            group_title=group_title,\n        )\n    )\n\n    op_stack = (\"duplicate_group\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_group_items","title":"<code>duplicate_group_items(board_id, group_id, monday_credentials, add_to_top=None, group_title=None, ids=None, limit=None, page=1, newest_first=None, exclude_nonactive=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate a group.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>add_to_top</code> <code>bool</code> <p>Should the new group be added to the top.</p> <code>None</code> <code>group_title</code> <code>str</code> <p>The group's title.</p> <code>None</code> <code>ids</code> <code>Iterable[int]</code> <p>None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>None</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>newest_first</code> <code>bool</code> <p>None.</p> <code>None</code> <code>exclude_nonactive</code> <code>bool</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_group_items(\n    board_id: int,\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    add_to_top: bool = None,\n    group_title: str = None,\n    ids: Iterable[int] = None,\n    limit: int = None,\n    page: int = 1,\n    newest_first: bool = None,\n    exclude_nonactive: bool = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate a group.\n\n    Args:\n        board_id: The board's unique identifier.\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        add_to_top: Should the new group be added to the top.\n        group_title: The group's title.\n        ids: None.\n        limit: None.\n        page: None.\n        newest_first: None.\n        exclude_nonactive: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_group(\n        **strip_kwargs(\n            board_id=board_id,\n            group_id=group_id,\n            add_to_top=add_to_top,\n            group_title=group_title,\n        )\n    ).items(\n        **strip_kwargs(\n            ids=ids,\n            limit=limit,\n            page=page,\n            newest_first=newest_first,\n            exclude_nonactive=exclude_nonactive,\n        )\n    )\n\n    op_stack = (\n        \"duplicate_group\",\n        \"items\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_group\"][\"items\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_item","title":"<code>duplicate_item(board_id, monday_credentials, with_updates=None, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate an item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>with_updates</code> <code>bool</code> <p>Duplicate with the item's updates.</p> <code>None</code> <code>item_id</code> <code>int</code> <p>The item's unique identifier. *Required.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_item(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    with_updates: bool = None,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate an item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        with_updates: Duplicate with the item's updates.\n        item_id: The item's unique identifier. *Required.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_item(\n        **strip_kwargs(\n            board_id=board_id,\n            with_updates=with_updates,\n            item_id=item_id,\n        )\n    )\n\n    op_stack = (\"duplicate_item\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_item\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_item_assets","title":"<code>duplicate_item_assets(board_id, monday_credentials, with_updates=None, item_id=None, assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate an item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>with_updates</code> <code>bool</code> <p>Duplicate with the item's updates.</p> <code>None</code> <code>item_id</code> <code>int</code> <p>The item's unique identifier. *Required.</p> <code>None</code> <code>assets_source</code> <code>AssetsSource</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_item_assets(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    with_updates: bool = None,\n    item_id: int = None,\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate an item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        with_updates: Duplicate with the item's updates.\n        item_id: The item's unique identifier. *Required.\n        assets_source: None.\n        column_ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_item(\n        **strip_kwargs(\n            board_id=board_id,\n            with_updates=with_updates,\n            item_id=item_id,\n        )\n    ).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"duplicate_item\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_item\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_item_board","title":"<code>duplicate_item_board(board_id, monday_credentials, with_updates=None, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate an item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>with_updates</code> <code>bool</code> <p>Duplicate with the item's updates.</p> <code>None</code> <code>item_id</code> <code>int</code> <p>The item's unique identifier. *Required.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_item_board(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    with_updates: bool = None,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate an item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        with_updates: Duplicate with the item's updates.\n        item_id: The item's unique identifier. *Required.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_item(\n        **strip_kwargs(\n            board_id=board_id,\n            with_updates=with_updates,\n            item_id=item_id,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"duplicate_item\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_item\"][\"board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_item_column_values","title":"<code>duplicate_item_column_values(board_id, monday_credentials, with_updates=None, item_id=None, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate an item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>with_updates</code> <code>bool</code> <p>Duplicate with the item's updates.</p> <code>None</code> <code>item_id</code> <code>int</code> <p>The item's unique identifier. *Required.</p> <code>None</code> <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_item_column_values(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    with_updates: bool = None,\n    item_id: int = None,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate an item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        with_updates: Duplicate with the item's updates.\n        item_id: The item's unique identifier. *Required.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_item(\n        **strip_kwargs(\n            board_id=board_id,\n            with_updates=with_updates,\n            item_id=item_id,\n        )\n    ).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"duplicate_item\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_item\"][\"column_values\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_item_creator","title":"<code>duplicate_item_creator(board_id, monday_credentials, with_updates=None, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate an item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>with_updates</code> <code>bool</code> <p>Duplicate with the item's updates.</p> <code>None</code> <code>item_id</code> <code>int</code> <p>The item's unique identifier. *Required.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_item_creator(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    with_updates: bool = None,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate an item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        with_updates: Duplicate with the item's updates.\n        item_id: The item's unique identifier. *Required.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_item(\n        **strip_kwargs(\n            board_id=board_id,\n            with_updates=with_updates,\n            item_id=item_id,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"duplicate_item\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_item\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_item_group","title":"<code>duplicate_item_group(board_id, monday_credentials, with_updates=None, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate an item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>with_updates</code> <code>bool</code> <p>Duplicate with the item's updates.</p> <code>None</code> <code>item_id</code> <code>int</code> <p>The item's unique identifier. *Required.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_item_group(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    with_updates: bool = None,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate an item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        with_updates: Duplicate with the item's updates.\n        item_id: The item's unique identifier. *Required.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_item(\n        **strip_kwargs(\n            board_id=board_id,\n            with_updates=with_updates,\n            item_id=item_id,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"duplicate_item\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_item\"][\"group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_item_subitems","title":"<code>duplicate_item_subitems(board_id, monday_credentials, with_updates=None, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate an item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>with_updates</code> <code>bool</code> <p>Duplicate with the item's updates.</p> <code>None</code> <code>item_id</code> <code>int</code> <p>The item's unique identifier. *Required.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_item_subitems(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    with_updates: bool = None,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate an item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        with_updates: Duplicate with the item's updates.\n        item_id: The item's unique identifier. *Required.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_item(\n        **strip_kwargs(\n            board_id=board_id,\n            with_updates=with_updates,\n            item_id=item_id,\n        )\n    ).subitems(**strip_kwargs())\n\n    op_stack = (\n        \"duplicate_item\",\n        \"subitems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_item\"][\"subitems\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_item_subscribers","title":"<code>duplicate_item_subscribers(board_id, monday_credentials, with_updates=None, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate an item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>with_updates</code> <code>bool</code> <p>Duplicate with the item's updates.</p> <code>None</code> <code>item_id</code> <code>int</code> <p>The item's unique identifier. *Required.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_item_subscribers(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    with_updates: bool = None,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate an item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        with_updates: Duplicate with the item's updates.\n        item_id: The item's unique identifier. *Required.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_item(\n        **strip_kwargs(\n            board_id=board_id,\n            with_updates=with_updates,\n            item_id=item_id,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"duplicate_item\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_item\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.duplicate_item_updates","title":"<code>duplicate_item_updates(board_id, monday_credentials, with_updates=None, item_id=None, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Duplicate an item.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>The board's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>with_updates</code> <code>bool</code> <p>Duplicate with the item's updates.</p> <code>None</code> <code>item_id</code> <code>int</code> <p>The item's unique identifier. *Required.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def duplicate_item_updates(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    with_updates: bool = None,\n    item_id: int = None,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Duplicate an item.\n\n    Args:\n        board_id: The board's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        with_updates: Duplicate with the item's updates.\n        item_id: The item's unique identifier. *Required.\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.duplicate_item(\n        **strip_kwargs(\n            board_id=board_id,\n            with_updates=with_updates,\n            item_id=item_id,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"duplicate_item\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"duplicate_item\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.like_update","title":"<code>like_update(monday_credentials, update_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Like an update.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>update_id</code> <code>int</code> <p>The update identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def like_update(\n    monday_credentials: MondayCredentials,\n    update_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Like an update.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        update_id: The update identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.like_update(\n        **strip_kwargs(\n            update_id=update_id,\n        )\n    )\n\n    op_stack = (\"like_update\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"like_update\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.like_update_assets","title":"<code>like_update_assets(monday_credentials, update_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Like an update.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>update_id</code> <code>int</code> <p>The update identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def like_update_assets(\n    monday_credentials: MondayCredentials,\n    update_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Like an update.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        update_id: The update identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.like_update(\n        **strip_kwargs(\n            update_id=update_id,\n        )\n    ).assets(**strip_kwargs())\n\n    op_stack = (\n        \"like_update\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"like_update\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.like_update_creator","title":"<code>like_update_creator(monday_credentials, update_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Like an update.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>update_id</code> <code>int</code> <p>The update identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def like_update_creator(\n    monday_credentials: MondayCredentials,\n    update_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Like an update.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        update_id: The update identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.like_update(\n        **strip_kwargs(\n            update_id=update_id,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"like_update\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"like_update\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.like_update_replies","title":"<code>like_update_replies(monday_credentials, update_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Like an update.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>update_id</code> <code>int</code> <p>The update identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def like_update_replies(\n    monday_credentials: MondayCredentials,\n    update_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Like an update.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        update_id: The update identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.like_update(\n        **strip_kwargs(\n            update_id=update_id,\n        )\n    ).replies(**strip_kwargs())\n\n    op_stack = (\n        \"like_update\",\n        \"replies\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"like_update\"][\"replies\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.move_item_to_group","title":"<code>move_item_to_group(group_id, monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Move an item to a different group.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def move_item_to_group(\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Move an item to a different group.\n\n    Args:\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.move_item_to_group(\n        **strip_kwargs(\n            group_id=group_id,\n            item_id=item_id,\n        )\n    )\n\n    op_stack = (\"move_item_to_group\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"move_item_to_group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.move_item_to_group_assets","title":"<code>move_item_to_group_assets(group_id, monday_credentials, item_id=None, assets_source=None, column_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Move an item to a different group.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>assets_source</code> <code>AssetsSource</code> <p>None.</p> <code>None</code> <code>column_ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def move_item_to_group_assets(\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    assets_source: graphql_schema.AssetsSource = None,\n    column_ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Move an item to a different group.\n\n    Args:\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        assets_source: None.\n        column_ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.move_item_to_group(\n        **strip_kwargs(\n            group_id=group_id,\n            item_id=item_id,\n        )\n    ).assets(\n        **strip_kwargs(\n            assets_source=assets_source,\n            column_ids=column_ids,\n        )\n    )\n\n    op_stack = (\n        \"move_item_to_group\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"move_item_to_group\"][\"assets\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.move_item_to_group_board","title":"<code>move_item_to_group_board(group_id, monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Move an item to a different group.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def move_item_to_group_board(\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Move an item to a different group.\n\n    Args:\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.move_item_to_group(\n        **strip_kwargs(\n            group_id=group_id,\n            item_id=item_id,\n        )\n    ).board(**strip_kwargs())\n\n    op_stack = (\n        \"move_item_to_group\",\n        \"board\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"move_item_to_group\"][\"board\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.move_item_to_group_column_values","title":"<code>move_item_to_group_column_values(group_id, monday_credentials, item_id=None, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Move an item to a different group.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>ids</code> <code>Iterable[str]</code> <p>None.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def move_item_to_group_column_values(\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    ids: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Move an item to a different group.\n\n    Args:\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        ids: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.move_item_to_group(\n        **strip_kwargs(\n            group_id=group_id,\n            item_id=item_id,\n        )\n    ).column_values(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\n        \"move_item_to_group\",\n        \"column_values\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"move_item_to_group\"][\"column_values\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.move_item_to_group_creator","title":"<code>move_item_to_group_creator(group_id, monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Move an item to a different group.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def move_item_to_group_creator(\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Move an item to a different group.\n\n    Args:\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.move_item_to_group(\n        **strip_kwargs(\n            group_id=group_id,\n            item_id=item_id,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"move_item_to_group\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"move_item_to_group\"][\"creator\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.move_item_to_group_group","title":"<code>move_item_to_group_group(group_id, monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Move an item to a different group.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def move_item_to_group_group(\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Move an item to a different group.\n\n    Args:\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.move_item_to_group(\n        **strip_kwargs(\n            group_id=group_id,\n            item_id=item_id,\n        )\n    ).group(**strip_kwargs())\n\n    op_stack = (\n        \"move_item_to_group\",\n        \"group\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"move_item_to_group\"][\"group\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.move_item_to_group_subitems","title":"<code>move_item_to_group_subitems(group_id, monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Move an item to a different group.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def move_item_to_group_subitems(\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Move an item to a different group.\n\n    Args:\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.move_item_to_group(\n        **strip_kwargs(\n            group_id=group_id,\n            item_id=item_id,\n        )\n    ).subitems(**strip_kwargs())\n\n    op_stack = (\n        \"move_item_to_group\",\n        \"subitems\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"move_item_to_group\"][\"subitems\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.move_item_to_group_subscribers","title":"<code>move_item_to_group_subscribers(group_id, monday_credentials, item_id=None, return_fields=None)</code>  <code>async</code>","text":"<p>Move an item to a different group.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def move_item_to_group_subscribers(\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Move an item to a different group.\n\n    Args:\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.move_item_to_group(\n        **strip_kwargs(\n            group_id=group_id,\n            item_id=item_id,\n        )\n    ).subscribers(**strip_kwargs())\n\n    op_stack = (\n        \"move_item_to_group\",\n        \"subscribers\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"move_item_to_group\"][\"subscribers\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.move_item_to_group_updates","title":"<code>move_item_to_group_updates(group_id, monday_credentials, item_id=None, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Move an item to a different group.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>str</code> <p>The group's unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>item_id</code> <code>int</code> <p>The item's unique identifier.</p> <code>None</code> <code>limit</code> <code>int</code> <p>None.</p> <code>25</code> <code>page</code> <code>int</code> <p>None.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def move_item_to_group_updates(\n    group_id: str,\n    monday_credentials: MondayCredentials,\n    item_id: int = None,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Move an item to a different group.\n\n    Args:\n        group_id: The group's unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        item_id: The item's unique identifier.\n        limit: None.\n        page: None.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.move_item_to_group(\n        **strip_kwargs(\n            group_id=group_id,\n            item_id=item_id,\n        )\n    ).updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\n        \"move_item_to_group\",\n        \"updates\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"move_item_to_group\"][\"updates\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.remove_mock_app_subscription","title":"<code>remove_mock_app_subscription(app_id, partial_signing_secret, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Remove mock app subscription for the current account.</p> <p>Parameters:</p> Name Type Description Default <code>app_id</code> <code>int</code> <p>The app id of the app to remove the mocked subscription for.</p> required <code>partial_signing_secret</code> <code>str</code> <p>The last 10 characters of the app's signing secret.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def remove_mock_app_subscription(\n    app_id: int,\n    partial_signing_secret: str,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Remove mock app subscription for the current account.\n\n    Args:\n        app_id: The app id of the app to remove the mocked subscription for.\n        partial_signing_secret: The last 10 characters of the app's signing\n            secret.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.remove_mock_app_subscription(\n        **strip_kwargs(\n            app_id=app_id,\n            partial_signing_secret=partial_signing_secret,\n        )\n    )\n\n    op_stack = (\"remove_mock_app_subscription\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"remove_mock_app_subscription\"]\n</code></pre>"},{"location":"mutations/#prefect_monday.mutations.set_mock_app_subscription","title":"<code>set_mock_app_subscription(app_id, partial_signing_secret, monday_credentials, plan_id=None, is_trial=None, renewal_date=None, billing_period=None, return_fields=None)</code>  <code>async</code>","text":"<p>Set mock app subscription for the current account.</p> <p>Parameters:</p> Name Type Description Default <code>app_id</code> <code>int</code> <p>The app id of the app to mock subscription for.</p> required <code>partial_signing_secret</code> <code>str</code> <p>The last 10 characters of the app's signing secret.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>plan_id</code> <code>str</code> <p>The plan id for the mocked plan.</p> <code>None</code> <code>is_trial</code> <code>bool</code> <p>Is the subscription a trial.</p> <code>None</code> <code>renewal_date</code> <code>datetime</code> <p>The subscription renewal date.</p> <code>None</code> <code>billing_period</code> <code>str</code> <p>Billing period [monthly/yearly].</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/mutation/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/mutations.py</code> <pre><code>@task\nasync def set_mock_app_subscription(\n    app_id: int,\n    partial_signing_secret: str,\n    monday_credentials: MondayCredentials,\n    plan_id: str = None,\n    is_trial: bool = None,\n    renewal_date: datetime = None,\n    billing_period: str = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Set mock app subscription for the current account.\n\n    Args:\n        app_id: The app id of the app to mock subscription for.\n        partial_signing_secret: The last 10 characters of the app's signing\n            secret.\n        monday_credentials: Credentials to use for authentication with Monday.\n        plan_id: The plan id for the mocked plan.\n        is_trial: Is the subscription a trial.\n        renewal_date: The subscription renewal date.\n        billing_period: Billing period [monthly/yearly].\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/mutation/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Mutation)\n    op_selection = op.set_mock_app_subscription(\n        **strip_kwargs(\n            app_id=app_id,\n            partial_signing_secret=partial_signing_secret,\n            plan_id=plan_id,\n            is_trial=is_trial,\n            renewal_date=renewal_date,\n            billing_period=billing_period,\n        )\n    )\n\n    op_stack = (\"set_mock_app_subscription\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"set_mock_app_subscription\"]\n</code></pre>"},{"location":"tags/","title":"Tags","text":"<p>This is a module containing: Monday query_tags* tasks</p>"},{"location":"tags/#prefect_monday.tags.query_tags","title":"<code>query_tags(monday_credentials, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>A list of tags unique identifiers.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/tags.py</code> <pre><code>@task\nasync def query_tags(\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: A list of tags unique identifiers.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.tags(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\"tags\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"tags\"]\n</code></pre>"},{"location":"teams/","title":"Teams","text":"<p>This is a module containing: Monday query_teams* tasks</p>"},{"location":"teams/#prefect_monday.teams.query_teams","title":"<code>query_teams(monday_credentials, ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>A list of teams unique identifiers.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/teams.py</code> <pre><code>@task\nasync def query_teams(\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: A list of teams unique identifiers.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.teams(\n        **strip_kwargs(\n            ids=ids,\n        )\n    )\n\n    op_stack = (\"teams\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"teams\"]\n</code></pre>"},{"location":"teams/#prefect_monday.teams.query_teams_users","title":"<code>query_teams_users(monday_credentials, ids=None, users_ids=None, kind=None, newest_first=None, limit=None, emails=None, return_fields=None)</code>  <code>async</code>","text":"<p>The users in the team.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>A list of teams unique identifiers.</p> <code>None</code> <code>users_ids</code> <code>Iterable[int]</code> <p>A list of users unique identifiers.</p> <code>None</code> <code>kind</code> <code>UserKind</code> <p>The kind to search users by (all / non_guests / guests / non_pending).</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created users at the top of the list.</p> <code>None</code> <code>limit</code> <code>int</code> <p>Number of users to get.</p> <code>None</code> <code>emails</code> <code>Iterable[str]</code> <p>A list of users emails.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/teams.py</code> <pre><code>@task\nasync def query_teams_users(\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    users_ids: Iterable[int] = None,\n    kind: graphql_schema.UserKind = None,\n    newest_first: bool = None,\n    limit: int = None,\n    emails: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The users in the team.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: A list of teams unique identifiers.\n        users_ids: A list of users unique identifiers.\n        kind: The kind to search users by (all / non_guests / guests /\n            non_pending).\n        newest_first: Get the recently created users at the top of the\n            list.\n        limit: Number of users to get.\n        emails: A list of users emails.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.teams(**strip_kwargs(ids=ids,)).users(\n        **strip_kwargs(\n            ids=users_ids,\n            kind=kind,\n            newest_first=newest_first,\n            limit=limit,\n            emails=emails,\n        )\n    )\n\n    op_stack = (\n        \"teams\",\n        \"users\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"teams\"][\"users\"]\n</code></pre>"},{"location":"updates/","title":"Updates","text":"<p>This is a module containing: Monday query_updates* tasks</p>"},{"location":"updates/#prefect_monday.updates.query_updates","title":"<code>query_updates(monday_credentials, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/updates.py</code> <pre><code>@task\nasync def query_updates(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    )\n\n    op_stack = (\"updates\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"updates\"]\n</code></pre>"},{"location":"updates/#prefect_monday.updates.query_updates_assets","title":"<code>query_updates_assets(monday_credentials, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>The update's assets/files.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/updates.py</code> <pre><code>@task\nasync def query_updates_assets(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The update's assets/files.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    ).assets(**strip_kwargs())\n\n    op_stack = (\n        \"updates\",\n        \"assets\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"updates\"][\"assets\"]\n</code></pre>"},{"location":"updates/#prefect_monday.updates.query_updates_creator","title":"<code>query_updates_creator(monday_credentials, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>The update's creator.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/updates.py</code> <pre><code>@task\nasync def query_updates_creator(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The update's creator.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    ).creator(**strip_kwargs())\n\n    op_stack = (\n        \"updates\",\n        \"creator\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"updates\"][\"creator\"]\n</code></pre>"},{"location":"updates/#prefect_monday.updates.query_updates_replies","title":"<code>query_updates_replies(monday_credentials, limit=25, page=1, return_fields=None)</code>  <code>async</code>","text":"<p>The update's replies.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>limit</code> <code>int</code> <p>Number of items to get, the default is 25.</p> <code>25</code> <code>page</code> <code>int</code> <p>Page number to get, starting at 1.</p> <code>1</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/updates.py</code> <pre><code>@task\nasync def query_updates_replies(\n    monday_credentials: MondayCredentials,\n    limit: int = 25,\n    page: int = 1,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The update's replies.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        limit: Number of items to get, the default is 25.\n        page: Page number to get, starting at 1.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.updates(\n        **strip_kwargs(\n            limit=limit,\n            page=page,\n        )\n    ).replies(**strip_kwargs())\n\n    op_stack = (\n        \"updates\",\n        \"replies\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"updates\"][\"replies\"]\n</code></pre>"},{"location":"users/","title":"Users","text":"<p>This is a module containing: Monday query_users* tasks</p>"},{"location":"users/#prefect_monday.users.query_users","title":"<code>query_users(monday_credentials, ids=None, kind=None, newest_first=None, limit=None, emails=None, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>A list of users unique identifiers.</p> <code>None</code> <code>kind</code> <code>UserKind</code> <p>The kind to search users by (all / non_guests / guests / non_pending).</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created users at the top of the list.</p> <code>None</code> <code>limit</code> <code>int</code> <p>Number of users to get.</p> <code>None</code> <code>emails</code> <code>Iterable[str]</code> <p>A list of users emails.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/users.py</code> <pre><code>@task\nasync def query_users(\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    kind: graphql_schema.UserKind = None,\n    newest_first: bool = None,\n    limit: int = None,\n    emails: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: A list of users unique identifiers.\n        kind: The kind to search users by (all / non_guests / guests /\n            non_pending).\n        newest_first: Get the recently created users at the top of the list.\n        limit: Number of users to get.\n        emails: A list of users emails.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.users(\n        **strip_kwargs(\n            ids=ids,\n            kind=kind,\n            newest_first=newest_first,\n            limit=limit,\n            emails=emails,\n        )\n    )\n\n    op_stack = (\"users\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"users\"]\n</code></pre>"},{"location":"users/#prefect_monday.users.query_users_account","title":"<code>query_users_account(monday_credentials, ids=None, kind=None, newest_first=None, limit=None, emails=None, return_fields=None)</code>  <code>async</code>","text":"<p>The user's account.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>A list of users unique identifiers.</p> <code>None</code> <code>kind</code> <code>UserKind</code> <p>The kind to search users by (all / non_guests / guests / non_pending).</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created users at the top of the list.</p> <code>None</code> <code>limit</code> <code>int</code> <p>Number of users to get.</p> <code>None</code> <code>emails</code> <code>Iterable[str]</code> <p>A list of users emails.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/users.py</code> <pre><code>@task\nasync def query_users_account(\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    kind: graphql_schema.UserKind = None,\n    newest_first: bool = None,\n    limit: int = None,\n    emails: Iterable[str] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The user's account.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: A list of users unique identifiers.\n        kind: The kind to search users by (all / non_guests / guests /\n            non_pending).\n        newest_first: Get the recently created users at the top of the\n            list.\n        limit: Number of users to get.\n        emails: A list of users emails.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.users(\n        **strip_kwargs(\n            ids=ids,\n            kind=kind,\n            newest_first=newest_first,\n            limit=limit,\n            emails=emails,\n        )\n    ).account(**strip_kwargs())\n\n    op_stack = (\n        \"users\",\n        \"account\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"users\"][\"account\"]\n</code></pre>"},{"location":"users/#prefect_monday.users.query_users_teams","title":"<code>query_users_teams(monday_credentials, ids=None, kind=None, newest_first=None, limit=None, emails=None, teams_ids=None, return_fields=None)</code>  <code>async</code>","text":"<p>The teams the user is a member in.</p> <p>Parameters:</p> Name Type Description Default <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>ids</code> <code>Iterable[int]</code> <p>A list of users unique identifiers.</p> <code>None</code> <code>kind</code> <code>UserKind</code> <p>The kind to search users by (all / non_guests / guests / non_pending).</p> <code>None</code> <code>newest_first</code> <code>bool</code> <p>Get the recently created users at the top of the list.</p> <code>None</code> <code>limit</code> <code>int</code> <p>Number of users to get.</p> <code>None</code> <code>emails</code> <code>Iterable[str]</code> <p>A list of users emails.</p> <code>None</code> <code>teams_ids</code> <code>Iterable[int]</code> <p>A list of teams unique identifiers.</p> <code>None</code> <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/users.py</code> <pre><code>@task\nasync def query_users_teams(\n    monday_credentials: MondayCredentials,\n    ids: Iterable[int] = None,\n    kind: graphql_schema.UserKind = None,\n    newest_first: bool = None,\n    limit: int = None,\n    emails: Iterable[str] = None,\n    teams_ids: Iterable[int] = None,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    The teams the user is a member in.\n\n    Args:\n        monday_credentials: Credentials to use for authentication with Monday.\n        ids: A list of users unique identifiers.\n        kind: The kind to search users by (all / non_guests / guests /\n            non_pending).\n        newest_first: Get the recently created users at the top of the\n            list.\n        limit: Number of users to get.\n        emails: A list of users emails.\n        teams_ids: A list of teams unique identifiers.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.users(\n        **strip_kwargs(\n            ids=ids,\n            kind=kind,\n            newest_first=newest_first,\n            limit=limit,\n            emails=emails,\n        )\n    ).teams(\n        **strip_kwargs(\n            ids=teams_ids,\n        )\n    )\n\n    op_stack = (\n        \"users\",\n        \"teams\",\n    )\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"users\"][\"teams\"]\n</code></pre>"},{"location":"utils/","title":"Utils","text":"<p>Utilities to assist with using generated collections.</p>"},{"location":"utils/#prefect_monday.utils.camel_to_snake_case","title":"<code>camel_to_snake_case(string)</code>","text":"<p>Converts CamelCase and lowerCamelCase to snake_case. Args:     string: The string in CamelCase or lowerCamelCase to convert. Returns:     A snake_case version of the string.</p> Source code in <code>prefect_monday/utils.py</code> <pre><code>def camel_to_snake_case(string: str) -&gt; str:\n    \"\"\"\n    Converts CamelCase and lowerCamelCase to snake_case.\n    Args:\n        string: The string in CamelCase or lowerCamelCase to convert.\n    Returns:\n        A snake_case version of the string.\n    \"\"\"\n    string = SNAKE_CASE_REGEX1.sub(r\"\\1_\\2\", string)\n    return SNAKE_CASE_REGEX2.sub(r\"\\1_\\2\", string).lower()\n</code></pre>"},{"location":"utils/#prefect_monday.utils.initialize_return_fields_defaults","title":"<code>initialize_return_fields_defaults(config_path)</code>","text":"<p>Reads config_path to parse out the desired default fields to return. Args:     config_path: The path to the config file.</p> Source code in <code>prefect_monday/utils.py</code> <pre><code>def initialize_return_fields_defaults(config_path: Union[Path, str]) -&gt; List:\n    \"\"\"\n    Reads config_path to parse out the desired default fields to return.\n    Args:\n        config_path: The path to the config file.\n    \"\"\"\n    with open(config_path, \"r\") as f:\n        config = json.load(f)\n\n    return_fields_defaults = defaultdict(lambda: [])\n    for op_type, sub_op_types in config.items():\n        for sub_op_type in sub_op_types:\n            if isinstance(sub_op_type, str):\n                return_fields_defaults[(op_type,)].append(\n                    camel_to_snake_case(sub_op_type)\n                )\n            elif isinstance(sub_op_type, dict):\n                sub_op_type_key = list(sub_op_type.keys())[0]\n                return_fields_defaults[(op_type, sub_op_type_key)] = [\n                    camel_to_snake_case(field) for field in sub_op_type[sub_op_type_key]\n                ]\n    return return_fields_defaults\n</code></pre>"},{"location":"utils/#prefect_monday.utils.strip_kwargs","title":"<code>strip_kwargs(**kwargs)</code>","text":"<p>Drops keyword arguments if value is None because sgqlc.Operation errors out if a keyword argument is provided, but set to None.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Dict</code> <p>Input keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict</code> <p>Stripped version of kwargs.</p> Source code in <code>prefect_monday/utils.py</code> <pre><code>def strip_kwargs(**kwargs: Dict) -&gt; Dict:\n    \"\"\"\n    Drops keyword arguments if value is None because sgqlc.Operation\n    errors out if a keyword argument is provided, but set to None.\n\n    Args:\n        **kwargs: Input keyword arguments.\n\n    Returns:\n        Stripped version of kwargs.\n    \"\"\"\n    stripped_dict = {}\n    for k, v in kwargs.items():\n        if isinstance(v, dict):\n            v = strip_kwargs(**v)\n        if v is not None:\n            stripped_dict[k] = v\n    return stripped_dict or {}\n</code></pre>"},{"location":"webhooks/","title":"Webhooks","text":"<p>This is a module containing: Monday query_webhooks* tasks</p>"},{"location":"webhooks/#prefect_monday.webhooks.query_webhooks","title":"<code>query_webhooks(board_id, monday_credentials, return_fields=None)</code>  <code>async</code>","text":"<p>Get your data from monday.com.</p> <p>Parameters:</p> Name Type Description Default <code>board_id</code> <code>int</code> <p>Board unique identifier.</p> required <code>monday_credentials</code> <code>MondayCredentials</code> <p>Credentials to use for authentication with Monday.</p> required <code>return_fields</code> <code>Iterable[str]</code> <p>Subset the return fields (as snake_case); defaults to fields listed in configs/query/*.json.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>A dict of the returned fields.</p> Source code in <code>prefect_monday/webhooks.py</code> <pre><code>@task\nasync def query_webhooks(\n    board_id: int,\n    monday_credentials: MondayCredentials,\n    return_fields: Iterable[str] = None,\n) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get your data from monday.com.\n\n    Args:\n        board_id: Board unique identifier.\n        monday_credentials: Credentials to use for authentication with Monday.\n        return_fields: Subset the return fields (as snake_case); defaults to\n            fields listed in configs/query/*.json.\n\n    Returns:\n        A dict of the returned fields.\n    \"\"\"\n    op = Operation(graphql_schema.Query)\n    op_selection = op.webhooks(\n        **strip_kwargs(\n            board_id=board_id,\n        )\n    )\n\n    op_stack = (\"webhooks\",)\n    op_selection = _subset_return_fields(\n        op_selection, op_stack, return_fields, return_fields_defaults\n    )\n\n    result = await _execute_graphql_op(op, monday_credentials)\n    return result[\"webhooks\"]\n</code></pre>"},{"location":"schemas/graphql_schema/","title":"Graphql Schema","text":""},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Account","title":"<code>Account</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Account(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"first_day_of_the_week\",\n        \"id\",\n        \"logo\",\n        \"name\",\n        \"plan\",\n        \"show_timeline_weekends\",\n        \"sign_up_product_kind\",\n        \"slug\",\n        \"tier\",\n    )\n    first_day_of_the_week = sgqlc.types.Field(\n        sgqlc.types.non_null(FirstDayOfTheWeek), graphql_name=\"first_day_of_the_week\"\n    )\n    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"id\")\n    logo = sgqlc.types.Field(String, graphql_name=\"logo\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    plan = sgqlc.types.Field(\"Plan\", graphql_name=\"plan\")\n    show_timeline_weekends = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"show_timeline_weekends\"\n    )\n    sign_up_product_kind = sgqlc.types.Field(\n        String, graphql_name=\"sign_up_product_kind\"\n    )\n    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"slug\")\n    tier = sgqlc.types.Field(String, graphql_name=\"tier\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.AccountProduct","title":"<code>AccountProduct</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class AccountProduct(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"kind\")\n    id = sgqlc.types.Field(Int, graphql_name=\"id\")\n    kind = sgqlc.types.Field(AccountProductKind, graphql_name=\"kind\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.AccountProductKind","title":"<code>AccountProductKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class AccountProductKind(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"core\",\n        \"crm\",\n        \"forms\",\n        \"marketing\",\n        \"projectManagement\",\n        \"software\",\n        \"whiteboard\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.ActivityLogType","title":"<code>ActivityLogType</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class ActivityLogType(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"account_id\",\n        \"created_at\",\n        \"data\",\n        \"entity\",\n        \"event\",\n        \"id\",\n        \"user_id\",\n    )\n    account_id = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"account_id\"\n    )\n    created_at = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"created_at\"\n    )\n    data = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"data\")\n    entity = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"entity\")\n    event = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"event\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"id\")\n    user_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"user_id\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.AppFeature","title":"<code>AppFeature</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class AppFeature(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"app_id\",\n        \"created_at\",\n        \"data\",\n        \"id\",\n        \"name\",\n        \"type\",\n        \"updated_at\",\n    )\n    app_id = sgqlc.types.Field(Int, graphql_name=\"app_id\")\n    created_at = sgqlc.types.Field(Date, graphql_name=\"created_at\")\n    data = sgqlc.types.Field(sgqlc.types.non_null(JSON), graphql_name=\"data\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"type\")\n    updated_at = sgqlc.types.Field(Date, graphql_name=\"updated_at\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.AppMonetizationStatus","title":"<code>AppMonetizationStatus</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class AppMonetizationStatus(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"is_supported\",)\n    is_supported = sgqlc.types.Field(\n        sgqlc.types.non_null(Boolean), graphql_name=\"is_supported\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.AppSubscription","title":"<code>AppSubscription</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class AppSubscription(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"billing_period\",\n        \"days_left\",\n        \"is_trial\",\n        \"plan_id\",\n        \"renewal_date\",\n    )\n    billing_period = sgqlc.types.Field(String, graphql_name=\"billing_period\")\n    days_left = sgqlc.types.Field(Int, graphql_name=\"days_left\")\n    is_trial = sgqlc.types.Field(Boolean, graphql_name=\"is_trial\")\n    plan_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"plan_id\")\n    renewal_date = sgqlc.types.Field(\n        sgqlc.types.non_null(Date), graphql_name=\"renewal_date\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Asset","title":"<code>Asset</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Asset(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"created_at\",\n        \"file_extension\",\n        \"file_size\",\n        \"id\",\n        \"name\",\n        \"original_geometry\",\n        \"public_url\",\n        \"uploaded_by\",\n        \"url\",\n        \"url_thumbnail\",\n    )\n    created_at = sgqlc.types.Field(Date, graphql_name=\"created_at\")\n    file_extension = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"file_extension\"\n    )\n    file_size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"file_size\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    original_geometry = sgqlc.types.Field(String, graphql_name=\"original_geometry\")\n    public_url = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"public_url\"\n    )\n    uploaded_by = sgqlc.types.Field(\n        sgqlc.types.non_null(\"User\"), graphql_name=\"uploaded_by\"\n    )\n    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"url\")\n    url_thumbnail = sgqlc.types.Field(String, graphql_name=\"url_thumbnail\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.AssetsSource","title":"<code>AssetsSource</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class AssetsSource(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"all\", \"columns\", \"gallery\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Board","title":"<code>Board</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Board(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"activity_logs\",\n        \"board_folder_id\",\n        \"board_kind\",\n        \"columns\",\n        \"communication\",\n        \"creator\",\n        \"description\",\n        \"groups\",\n        \"id\",\n        \"items\",\n        \"name\",\n        \"owner\",\n        \"owners\",\n        \"permissions\",\n        \"pos\",\n        \"state\",\n        \"subscribers\",\n        \"tags\",\n        \"top_group\",\n        \"type\",\n        \"updated_at\",\n        \"updates\",\n        \"views\",\n        \"workspace\",\n        \"workspace_id\",\n    )\n    activity_logs = sgqlc.types.Field(\n        sgqlc.types.list_of(ActivityLogType),\n        graphql_name=\"activity_logs\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=25)),\n                (\"page\", sgqlc.types.Arg(Int, graphql_name=\"page\", default=1)),\n                (\n                    \"user_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"user_ids\", default=None\n                    ),\n                ),\n                (\n                    \"column_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(String),\n                        graphql_name=\"column_ids\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"group_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(String),\n                        graphql_name=\"group_ids\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"item_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"item_ids\", default=None\n                    ),\n                ),\n                (\n                    \"from_\",\n                    sgqlc.types.Arg(ISO8601DateTime, graphql_name=\"from\", default=None),\n                ),\n                (\n                    \"to\",\n                    sgqlc.types.Arg(ISO8601DateTime, graphql_name=\"to\", default=None),\n                ),\n            )\n        ),\n    )\n    board_folder_id = sgqlc.types.Field(Int, graphql_name=\"board_folder_id\")\n    board_kind = sgqlc.types.Field(\n        sgqlc.types.non_null(BoardKind), graphql_name=\"board_kind\"\n    )\n    columns = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Column\"),\n        graphql_name=\"columns\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(String), graphql_name=\"ids\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    communication = sgqlc.types.Field(JSON, graphql_name=\"communication\")\n    creator = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"creator\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    groups = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Group\"),\n        graphql_name=\"groups\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(String), graphql_name=\"ids\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    items = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Item\"),\n        graphql_name=\"items\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"ids\", default=None\n                    ),\n                ),\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=None)),\n                (\"page\", sgqlc.types.Arg(Int, graphql_name=\"page\", default=1)),\n                (\n                    \"newest_first\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"newest_first\", default=None),\n                ),\n                (\n                    \"exclude_nonactive\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"exclude_nonactive\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    owner = sgqlc.types.Field(sgqlc.types.non_null(\"User\"), graphql_name=\"owner\")\n    owners = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(\"User\")), graphql_name=\"owners\"\n    )\n    permissions = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"permissions\"\n    )\n    pos = sgqlc.types.Field(String, graphql_name=\"pos\")\n    state = sgqlc.types.Field(sgqlc.types.non_null(State), graphql_name=\"state\")\n    subscribers = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(\"User\")), graphql_name=\"subscribers\"\n    )\n    tags = sgqlc.types.Field(sgqlc.types.list_of(\"Tag\"), graphql_name=\"tags\")\n    top_group = sgqlc.types.Field(\n        sgqlc.types.non_null(\"Group\"), graphql_name=\"top_group\"\n    )\n    type = sgqlc.types.Field(BoardObjectType, graphql_name=\"type\")\n    updated_at = sgqlc.types.Field(ISO8601DateTime, graphql_name=\"updated_at\")\n    updates = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Update\"),\n        graphql_name=\"updates\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=25)),\n                (\"page\", sgqlc.types.Arg(Int, graphql_name=\"page\", default=1)),\n            )\n        ),\n    )\n    views = sgqlc.types.Field(\n        sgqlc.types.list_of(\"BoardView\"),\n        graphql_name=\"views\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"ids\", default=None\n                    ),\n                ),\n                (\"type\", sgqlc.types.Arg(String, graphql_name=\"type\", default=None)),\n            )\n        ),\n    )\n    workspace = sgqlc.types.Field(\"Workspace\", graphql_name=\"workspace\")\n    workspace_id = sgqlc.types.Field(Int, graphql_name=\"workspace_id\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.BoardAttributes","title":"<code>BoardAttributes</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class BoardAttributes(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"communication\", \"description\", \"name\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.BoardDuplication","title":"<code>BoardDuplication</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class BoardDuplication(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"board\", \"is_async\")\n    board = sgqlc.types.Field(sgqlc.types.non_null(Board), graphql_name=\"board\")\n    is_async = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"is_async\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.BoardKind","title":"<code>BoardKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class BoardKind(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"private\", \"public\", \"share\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.BoardObjectType","title":"<code>BoardObjectType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class BoardObjectType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"board\", \"document\", \"sub_items_board\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.BoardSubscriberKind","title":"<code>BoardSubscriberKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class BoardSubscriberKind(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"owner\", \"subscriber\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.BoardView","title":"<code>BoardView</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class BoardView(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"name\", \"settings_str\", \"type\", \"view_specific_data_str\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    settings_str = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"settings_str\"\n    )\n    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"type\")\n    view_specific_data_str = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"view_specific_data_str\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.BoardsOrderBy","title":"<code>BoardsOrderBy</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class BoardsOrderBy(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"created_at\", \"used_at\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Column","title":"<code>Column</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Column(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"archived\",\n        \"description\",\n        \"id\",\n        \"pos\",\n        \"settings_str\",\n        \"title\",\n        \"type\",\n        \"width\",\n    )\n    archived = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"archived\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    pos = sgqlc.types.Field(String, graphql_name=\"pos\")\n    settings_str = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"settings_str\"\n    )\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"type\")\n    width = sgqlc.types.Field(Int, graphql_name=\"width\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.ColumnProperty","title":"<code>ColumnProperty</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class ColumnProperty(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"description\", \"title\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.ColumnType","title":"<code>ColumnType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class ColumnType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"auto_number\",\n        \"checkbox\",\n        \"color_picker\",\n        \"country\",\n        \"creation_log\",\n        \"date\",\n        \"dependency\",\n        \"dropdown\",\n        \"email\",\n        \"file\",\n        \"hour\",\n        \"integration\",\n        \"item_id\",\n        \"last_updated\",\n        \"link\",\n        \"location\",\n        \"long_text\",\n        \"numbers\",\n        \"people\",\n        \"phone\",\n        \"progress\",\n        \"rating\",\n        \"status\",\n        \"tags\",\n        \"team\",\n        \"text\",\n        \"time_tracking\",\n        \"timeline\",\n        \"vote\",\n        \"week\",\n        \"world_clock\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.ColumnValue","title":"<code>ColumnValue</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class ColumnValue(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"additional_info\",\n        \"description\",\n        \"id\",\n        \"text\",\n        \"title\",\n        \"type\",\n        \"value\",\n    )\n    additional_info = sgqlc.types.Field(JSON, graphql_name=\"additional_info\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    text = sgqlc.types.Field(String, graphql_name=\"text\")\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"type\")\n    value = sgqlc.types.Field(JSON, graphql_name=\"value\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Complexity","title":"<code>Complexity</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Complexity(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"after\", \"before\", \"query\", \"reset_in_x_seconds\")\n    after = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"after\")\n    before = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"before\")\n    query = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"query\")\n    reset_in_x_seconds = sgqlc.types.Field(\n        sgqlc.types.non_null(Int), graphql_name=\"reset_in_x_seconds\"\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.DuplicateBoardType","title":"<code>DuplicateBoardType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class DuplicateBoardType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"duplicate_board_with_pulses\",\n        \"duplicate_board_with_pulses_and_updates\",\n        \"duplicate_board_with_structure\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.File","title":"<code>File</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class File(sgqlc.types.Scalar):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.FirstDayOfTheWeek","title":"<code>FirstDayOfTheWeek</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class FirstDayOfTheWeek(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"monday\", \"sunday\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Group","title":"<code>Group</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Group(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"archived\",\n        \"color\",\n        \"deleted\",\n        \"id\",\n        \"items\",\n        \"position\",\n        \"title\",\n    )\n    archived = sgqlc.types.Field(Boolean, graphql_name=\"archived\")\n    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"color\")\n    deleted = sgqlc.types.Field(Boolean, graphql_name=\"deleted\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    items = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Item\"),\n        graphql_name=\"items\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"ids\", default=None\n                    ),\n                ),\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=None)),\n                (\"page\", sgqlc.types.Arg(Int, graphql_name=\"page\", default=1)),\n                (\n                    \"newest_first\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"newest_first\", default=None),\n                ),\n                (\n                    \"exclude_nonactive\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"exclude_nonactive\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    position = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"position\")\n    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"title\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.ISO8601DateTime","title":"<code>ISO8601DateTime</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class ISO8601DateTime(sgqlc.types.Scalar):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.InvitedUserKind","title":"<code>InvitedUserKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class InvitedUserKind(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"guest\", \"member\", \"view_only\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Item","title":"<code>Item</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Item(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"assets\",\n        \"board\",\n        \"column_values\",\n        \"created_at\",\n        \"creator\",\n        \"creator_id\",\n        \"email\",\n        \"group\",\n        \"id\",\n        \"name\",\n        \"parent_item\",\n        \"state\",\n        \"subitems\",\n        \"subscribers\",\n        \"updated_at\",\n        \"updates\",\n    )\n    assets = sgqlc.types.Field(\n        sgqlc.types.list_of(Asset),\n        graphql_name=\"assets\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"assets_source\",\n                    sgqlc.types.Arg(\n                        AssetsSource, graphql_name=\"assets_source\", default=None\n                    ),\n                ),\n                (\n                    \"column_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(String),\n                        graphql_name=\"column_ids\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    board = sgqlc.types.Field(Board, graphql_name=\"board\")\n    column_values = sgqlc.types.Field(\n        sgqlc.types.list_of(ColumnValue),\n        graphql_name=\"column_values\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(String), graphql_name=\"ids\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    created_at = sgqlc.types.Field(Date, graphql_name=\"created_at\")\n    creator = sgqlc.types.Field(\"User\", graphql_name=\"creator\")\n    creator_id = sgqlc.types.Field(\n        sgqlc.types.non_null(String), graphql_name=\"creator_id\"\n    )\n    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"email\")\n    group = sgqlc.types.Field(Group, graphql_name=\"group\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    parent_item = sgqlc.types.Field(\"Item\", graphql_name=\"parent_item\")\n    state = sgqlc.types.Field(State, graphql_name=\"state\")\n    subitems = sgqlc.types.Field(sgqlc.types.list_of(\"Item\"), graphql_name=\"subitems\")\n    subscribers = sgqlc.types.Field(\n        sgqlc.types.non_null(sgqlc.types.list_of(\"User\")), graphql_name=\"subscribers\"\n    )\n    updated_at = sgqlc.types.Field(Date, graphql_name=\"updated_at\")\n    updates = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Update\"),\n        graphql_name=\"updates\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=25)),\n                (\"page\", sgqlc.types.Arg(Int, graphql_name=\"page\", default=1)),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.JSON","title":"<code>JSON</code>","text":"<p>             Bases: <code>Scalar</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class JSON(sgqlc.types.Scalar):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.LinkageType","title":"<code>LinkageType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class LinkageType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"connection\", \"reflection\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.MentionType","title":"<code>MentionType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class MentionType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"Board\", \"Project\", \"Team\", \"User\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Mutation","title":"<code>Mutation</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Mutation(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"add_file_to_column\",\n        \"add_file_to_update\",\n        \"add_subscribers_to_board\",\n        \"add_teams_to_workspace\",\n        \"add_users_to_workspace\",\n        \"archive_board\",\n        \"archive_group\",\n        \"archive_item\",\n        \"change_column_metadata\",\n        \"change_column_title\",\n        \"change_column_value\",\n        \"change_multiple_column_values\",\n        \"change_simple_column_value\",\n        \"clear_item_updates\",\n        \"complexity\",\n        \"create_board\",\n        \"create_column\",\n        \"create_group\",\n        \"create_item\",\n        \"create_notification\",\n        \"create_or_get_tag\",\n        \"create_subitem\",\n        \"create_update\",\n        \"create_webhook\",\n        \"create_workspace\",\n        \"delete_board\",\n        \"delete_group\",\n        \"delete_item\",\n        \"delete_subscribers_from_board\",\n        \"delete_teams_from_workspace\",\n        \"delete_update\",\n        \"delete_users_from_workspace\",\n        \"delete_webhook\",\n        \"duplicate_board\",\n        \"duplicate_group\",\n        \"duplicate_item\",\n        \"like_update\",\n        \"move_item_to_group\",\n        \"remove_mock_app_subscription\",\n        \"set_mock_app_subscription\",\n        \"update_board\",\n    )\n    add_file_to_column = sgqlc.types.Field(\n        Asset,\n        graphql_name=\"add_file_to_column\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"item_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"item_id\", default=None\n                    ),\n                ),\n                (\n                    \"column_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"column_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"file\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(File), graphql_name=\"file\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    add_file_to_update = sgqlc.types.Field(\n        Asset,\n        graphql_name=\"add_file_to_update\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"update_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int),\n                        graphql_name=\"update_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"file\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(File), graphql_name=\"file\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    add_subscribers_to_board = sgqlc.types.Field(\n        sgqlc.types.list_of(\"User\"),\n        graphql_name=\"add_subscribers_to_board\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"user_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),\n                        graphql_name=\"user_ids\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"kind\",\n                    sgqlc.types.Arg(\n                        BoardSubscriberKind, graphql_name=\"kind\", default=\"subscriber\"\n                    ),\n                ),\n            )\n        ),\n    )\n    add_teams_to_workspace = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Team\"),\n        graphql_name=\"add_teams_to_workspace\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"workspace_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int),\n                        graphql_name=\"workspace_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"team_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),\n                        graphql_name=\"team_ids\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    add_users_to_workspace = sgqlc.types.Field(\n        sgqlc.types.list_of(\"User\"),\n        graphql_name=\"add_users_to_workspace\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"workspace_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int),\n                        graphql_name=\"workspace_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"user_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),\n                        graphql_name=\"user_ids\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"kind\",\n                    sgqlc.types.Arg(\n                        WorkspaceSubscriberKind,\n                        graphql_name=\"kind\",\n                        default=\"subscriber\",\n                    ),\n                ),\n            )\n        ),\n    )\n    archive_board = sgqlc.types.Field(\n        Board,\n        graphql_name=\"archive_board\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    archive_group = sgqlc.types.Field(\n        Group,\n        graphql_name=\"archive_group\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"group_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"group_id\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    archive_item = sgqlc.types.Field(\n        Item,\n        graphql_name=\"archive_item\",\n        args=sgqlc.types.ArgDict(\n            ((\"item_id\", sgqlc.types.Arg(Int, graphql_name=\"item_id\", default=None)),)\n        ),\n    )\n    change_column_metadata = sgqlc.types.Field(\n        Column,\n        graphql_name=\"change_column_metadata\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"column_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"column_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"column_property\",\n                    sgqlc.types.Arg(\n                        ColumnProperty, graphql_name=\"column_property\", default=None\n                    ),\n                ),\n                (\"value\", sgqlc.types.Arg(String, graphql_name=\"value\", default=None)),\n            )\n        ),\n    )\n    change_column_title = sgqlc.types.Field(\n        Column,\n        graphql_name=\"change_column_title\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"column_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"column_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"title\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"title\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    change_column_value = sgqlc.types.Field(\n        Item,\n        graphql_name=\"change_column_value\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"item_id\", sgqlc.types.Arg(Int, graphql_name=\"item_id\", default=None)),\n                (\n                    \"column_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"column_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(JSON), graphql_name=\"value\", default=None\n                    ),\n                ),\n                (\n                    \"create_labels_if_missing\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"create_labels_if_missing\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    change_multiple_column_values = sgqlc.types.Field(\n        Item,\n        graphql_name=\"change_multiple_column_values\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"item_id\", sgqlc.types.Arg(Int, graphql_name=\"item_id\", default=None)),\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"column_values\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(JSON),\n                        graphql_name=\"column_values\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"create_labels_if_missing\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"create_labels_if_missing\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    change_simple_column_value = sgqlc.types.Field(\n        Item,\n        graphql_name=\"change_simple_column_value\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"item_id\", sgqlc.types.Arg(Int, graphql_name=\"item_id\", default=None)),\n                (\n                    \"column_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"column_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"value\", default=None\n                    ),\n                ),\n                (\n                    \"create_labels_if_missing\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"create_labels_if_missing\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    clear_item_updates = sgqlc.types.Field(\n        Item,\n        graphql_name=\"clear_item_updates\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"item_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"item_id\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    complexity = sgqlc.types.Field(Complexity, graphql_name=\"complexity\")\n    create_board = sgqlc.types.Field(\n        Board,\n        graphql_name=\"create_board\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"board_name\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"board_kind\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(BoardKind),\n                        graphql_name=\"board_kind\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"folder_id\",\n                    sgqlc.types.Arg(Int, graphql_name=\"folder_id\", default=None),\n                ),\n                (\n                    \"workspace_id\",\n                    sgqlc.types.Arg(Int, graphql_name=\"workspace_id\", default=None),\n                ),\n                (\n                    \"template_id\",\n                    sgqlc.types.Arg(Int, graphql_name=\"template_id\", default=None),\n                ),\n                (\n                    \"board_owner_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int),\n                        graphql_name=\"board_owner_ids\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"board_subscriber_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int),\n                        graphql_name=\"board_subscriber_ids\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_column = sgqlc.types.Field(\n        Column,\n        graphql_name=\"create_column\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"title\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"title\", default=None\n                    ),\n                ),\n                (\n                    \"description\",\n                    sgqlc.types.Arg(String, graphql_name=\"description\", default=None),\n                ),\n                (\n                    \"column_type\",\n                    sgqlc.types.Arg(\n                        ColumnType, graphql_name=\"column_type\", default=None\n                    ),\n                ),\n                (\n                    \"defaults\",\n                    sgqlc.types.Arg(JSON, graphql_name=\"defaults\", default=None),\n                ),\n            )\n        ),\n    )\n    create_group = sgqlc.types.Field(\n        Group,\n        graphql_name=\"create_group\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"group_name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"group_name\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_item = sgqlc.types.Field(\n        Item,\n        graphql_name=\"create_item\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"item_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"item_name\", default=None),\n                ),\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"group_id\",\n                    sgqlc.types.Arg(String, graphql_name=\"group_id\", default=None),\n                ),\n                (\n                    \"column_values\",\n                    sgqlc.types.Arg(JSON, graphql_name=\"column_values\", default=None),\n                ),\n                (\n                    \"create_labels_if_missing\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"create_labels_if_missing\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    create_notification = sgqlc.types.Field(\n        \"Notification\",\n        graphql_name=\"create_notification\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"text\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"text\", default=None\n                    ),\n                ),\n                (\n                    \"user_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"user_id\", default=None\n                    ),\n                ),\n                (\n                    \"target_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int),\n                        graphql_name=\"target_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"target_type\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(NotificationTargetType),\n                        graphql_name=\"target_type\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    create_or_get_tag = sgqlc.types.Field(\n        \"Tag\",\n        graphql_name=\"create_or_get_tag\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"tag_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"tag_name\", default=None),\n                ),\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(Int, graphql_name=\"board_id\", default=None),\n                ),\n            )\n        ),\n    )\n    create_subitem = sgqlc.types.Field(\n        Item,\n        graphql_name=\"create_subitem\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"parent_item_id\",\n                    sgqlc.types.Arg(Int, graphql_name=\"parent_item_id\", default=None),\n                ),\n                (\n                    \"item_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"item_name\", default=None),\n                ),\n                (\n                    \"column_values\",\n                    sgqlc.types.Arg(JSON, graphql_name=\"column_values\", default=None),\n                ),\n                (\n                    \"create_labels_if_missing\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"create_labels_if_missing\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    create_update = sgqlc.types.Field(\n        \"Update\",\n        graphql_name=\"create_update\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"body\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"body\", default=None\n                    ),\n                ),\n                (\"item_id\", sgqlc.types.Arg(Int, graphql_name=\"item_id\", default=None)),\n                (\n                    \"parent_id\",\n                    sgqlc.types.Arg(Int, graphql_name=\"parent_id\", default=None),\n                ),\n            )\n        ),\n    )\n    create_webhook = sgqlc.types.Field(\n        \"Webhook\",\n        graphql_name=\"create_webhook\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"url\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"url\", default=None\n                    ),\n                ),\n                (\n                    \"event\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(WebhookEventType),\n                        graphql_name=\"event\",\n                        default=None,\n                    ),\n                ),\n                (\"config\", sgqlc.types.Arg(JSON, graphql_name=\"config\", default=None)),\n            )\n        ),\n    )\n    create_workspace = sgqlc.types.Field(\n        \"Workspace\",\n        graphql_name=\"create_workspace\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"name\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String), graphql_name=\"name\", default=None\n                    ),\n                ),\n                (\n                    \"kind\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(WorkspaceKind),\n                        graphql_name=\"kind\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"description\",\n                    sgqlc.types.Arg(String, graphql_name=\"description\", default=None),\n                ),\n            )\n        ),\n    )\n    delete_board = sgqlc.types.Field(\n        Board,\n        graphql_name=\"delete_board\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_group = sgqlc.types.Field(\n        Group,\n        graphql_name=\"delete_group\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"group_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"group_id\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_item = sgqlc.types.Field(\n        Item,\n        graphql_name=\"delete_item\",\n        args=sgqlc.types.ArgDict(\n            ((\"item_id\", sgqlc.types.Arg(Int, graphql_name=\"item_id\", default=None)),)\n        ),\n    )\n    delete_subscribers_from_board = sgqlc.types.Field(\n        sgqlc.types.list_of(\"User\"),\n        graphql_name=\"delete_subscribers_from_board\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"user_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),\n                        graphql_name=\"user_ids\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_teams_from_workspace = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Team\"),\n        graphql_name=\"delete_teams_from_workspace\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"workspace_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int),\n                        graphql_name=\"workspace_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"team_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),\n                        graphql_name=\"team_ids\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_update = sgqlc.types.Field(\n        \"Update\",\n        graphql_name=\"delete_update\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"id\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_users_from_workspace = sgqlc.types.Field(\n        sgqlc.types.list_of(\"User\"),\n        graphql_name=\"delete_users_from_workspace\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"workspace_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int),\n                        graphql_name=\"workspace_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"user_ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),\n                        graphql_name=\"user_ids\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    delete_webhook = sgqlc.types.Field(\n        \"Webhook\",\n        graphql_name=\"delete_webhook\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"id\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    duplicate_board = sgqlc.types.Field(\n        BoardDuplication,\n        graphql_name=\"duplicate_board\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"duplicate_type\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(DuplicateBoardType),\n                        graphql_name=\"duplicate_type\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"board_name\",\n                    sgqlc.types.Arg(String, graphql_name=\"board_name\", default=None),\n                ),\n                (\n                    \"workspace_id\",\n                    sgqlc.types.Arg(Int, graphql_name=\"workspace_id\", default=None),\n                ),\n                (\n                    \"folder_id\",\n                    sgqlc.types.Arg(Int, graphql_name=\"folder_id\", default=None),\n                ),\n                (\n                    \"keep_subscribers\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"keep_subscribers\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    duplicate_group = sgqlc.types.Field(\n        Group,\n        graphql_name=\"duplicate_group\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"group_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"group_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"add_to_top\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"add_to_top\", default=None),\n                ),\n                (\n                    \"group_title\",\n                    sgqlc.types.Arg(String, graphql_name=\"group_title\", default=None),\n                ),\n            )\n        ),\n    )\n    duplicate_item = sgqlc.types.Field(\n        Item,\n        graphql_name=\"duplicate_item\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"with_updates\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"with_updates\", default=None),\n                ),\n                (\"item_id\", sgqlc.types.Arg(Int, graphql_name=\"item_id\", default=None)),\n            )\n        ),\n    )\n    like_update = sgqlc.types.Field(\n        \"Update\",\n        graphql_name=\"like_update\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"update_id\",\n                    sgqlc.types.Arg(Int, graphql_name=\"update_id\", default=None),\n                ),\n            )\n        ),\n    )\n    move_item_to_group = sgqlc.types.Field(\n        Item,\n        graphql_name=\"move_item_to_group\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"item_id\", sgqlc.types.Arg(Int, graphql_name=\"item_id\", default=None)),\n                (\n                    \"group_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"group_id\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    remove_mock_app_subscription = sgqlc.types.Field(\n        AppSubscription,\n        graphql_name=\"remove_mock_app_subscription\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"app_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"app_id\", default=None\n                    ),\n                ),\n                (\n                    \"partial_signing_secret\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"partial_signing_secret\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    set_mock_app_subscription = sgqlc.types.Field(\n        AppSubscription,\n        graphql_name=\"set_mock_app_subscription\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"app_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"app_id\", default=None\n                    ),\n                ),\n                (\n                    \"partial_signing_secret\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"partial_signing_secret\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"plan_id\",\n                    sgqlc.types.Arg(String, graphql_name=\"plan_id\", default=None),\n                ),\n                (\n                    \"is_trial\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"is_trial\", default=None),\n                ),\n                (\n                    \"renewal_date\",\n                    sgqlc.types.Arg(Date, graphql_name=\"renewal_date\", default=None),\n                ),\n                (\n                    \"billing_period\",\n                    sgqlc.types.Arg(\n                        String, graphql_name=\"billing_period\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    update_board = sgqlc.types.Field(\n        JSON,\n        graphql_name=\"update_board\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"board_attribute\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(BoardAttributes),\n                        graphql_name=\"board_attribute\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"new_value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"new_value\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Notification","title":"<code>Notification</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Notification(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"text\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    text = sgqlc.types.Field(String, graphql_name=\"text\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.NotificationTargetType","title":"<code>NotificationTargetType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class NotificationTargetType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"Post\", \"Project\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Plan","title":"<code>Plan</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Plan(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"max_users\", \"period\", \"tier\", \"version\")\n    max_users = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"max_users\")\n    period = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"period\")\n    tier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"tier\")\n    version = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"version\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.ProductKind","title":"<code>ProductKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class ProductKind(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"core\",\n        \"crm\",\n        \"forms\",\n        \"knowledge\",\n        \"marketing\",\n        \"project_management\",\n        \"software\",\n        \"whiteboard\",\n        \"workflows\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Query","title":"<code>Query</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Query(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"account\",\n        \"app_subscription\",\n        \"apps_monetization_status\",\n        \"assets\",\n        \"boards\",\n        \"complexity\",\n        \"items\",\n        \"items_by_column_values\",\n        \"items_by_multiple_column_values\",\n        \"me\",\n        \"tags\",\n        \"teams\",\n        \"updates\",\n        \"users\",\n        \"webhooks\",\n    )\n    account = sgqlc.types.Field(Account, graphql_name=\"account\")\n    app_subscription = sgqlc.types.Field(\n        sgqlc.types.list_of(AppSubscription), graphql_name=\"app_subscription\"\n    )\n    apps_monetization_status = sgqlc.types.Field(\n        AppMonetizationStatus, graphql_name=\"apps_monetization_status\"\n    )\n    assets = sgqlc.types.Field(\n        sgqlc.types.list_of(Asset),\n        graphql_name=\"assets\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(sgqlc.types.list_of(Int)),\n                        graphql_name=\"ids\",\n                        default=None,\n                    ),\n                ),\n            )\n        ),\n    )\n    boards = sgqlc.types.Field(\n        sgqlc.types.list_of(Board),\n        graphql_name=\"boards\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=25)),\n                (\"page\", sgqlc.types.Arg(Int, graphql_name=\"page\", default=1)),\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"ids\", default=None\n                    ),\n                ),\n                (\n                    \"board_kind\",\n                    sgqlc.types.Arg(BoardKind, graphql_name=\"board_kind\", default=None),\n                ),\n                (\n                    \"state\",\n                    sgqlc.types.Arg(State, graphql_name=\"state\", default=\"active\"),\n                ),\n                (\n                    \"newest_first\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"newest_first\", default=None),\n                ),\n                (\n                    \"order_by\",\n                    sgqlc.types.Arg(\n                        BoardsOrderBy, graphql_name=\"order_by\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    complexity = sgqlc.types.Field(Complexity, graphql_name=\"complexity\")\n    items = sgqlc.types.Field(\n        sgqlc.types.list_of(Item),\n        graphql_name=\"items\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=25)),\n                (\"page\", sgqlc.types.Arg(Int, graphql_name=\"page\", default=1)),\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"ids\", default=None\n                    ),\n                ),\n                (\n                    \"newest_first\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"newest_first\", default=None),\n                ),\n                (\n                    \"exclude_nonactive\",\n                    sgqlc.types.Arg(\n                        Boolean, graphql_name=\"exclude_nonactive\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    items_by_column_values = sgqlc.types.Field(\n        sgqlc.types.list_of(Item),\n        graphql_name=\"items_by_column_values\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=None)),\n                (\"page\", sgqlc.types.Arg(Int, graphql_name=\"page\", default=1)),\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"column_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"column_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"column_value\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"column_value\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"column_type\",\n                    sgqlc.types.Arg(String, graphql_name=\"column_type\", default=None),\n                ),\n                (\n                    \"state\",\n                    sgqlc.types.Arg(State, graphql_name=\"state\", default=\"active\"),\n                ),\n            )\n        ),\n    )\n    items_by_multiple_column_values = sgqlc.types.Field(\n        sgqlc.types.list_of(Item),\n        graphql_name=\"items_by_multiple_column_values\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=None)),\n                (\"page\", sgqlc.types.Arg(Int, graphql_name=\"page\", default=1)),\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n                (\n                    \"column_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(String),\n                        graphql_name=\"column_id\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"column_values\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(sgqlc.types.list_of(String)),\n                        graphql_name=\"column_values\",\n                        default=None,\n                    ),\n                ),\n                (\n                    \"column_type\",\n                    sgqlc.types.Arg(String, graphql_name=\"column_type\", default=None),\n                ),\n                (\n                    \"state\",\n                    sgqlc.types.Arg(State, graphql_name=\"state\", default=\"active\"),\n                ),\n            )\n        ),\n    )\n    me = sgqlc.types.Field(\"User\", graphql_name=\"me\")\n    tags = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Tag\"),\n        graphql_name=\"tags\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"ids\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    teams = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Team\"),\n        graphql_name=\"teams\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"ids\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    updates = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Update\"),\n        graphql_name=\"updates\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=25)),\n                (\"page\", sgqlc.types.Arg(Int, graphql_name=\"page\", default=1)),\n            )\n        ),\n    )\n    users = sgqlc.types.Field(\n        sgqlc.types.list_of(\"User\"),\n        graphql_name=\"users\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"ids\", default=None\n                    ),\n                ),\n                (\"kind\", sgqlc.types.Arg(UserKind, graphql_name=\"kind\", default=None)),\n                (\n                    \"newest_first\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"newest_first\", default=None),\n                ),\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=None)),\n                (\n                    \"emails\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(String), graphql_name=\"emails\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    webhooks = sgqlc.types.Field(\n        sgqlc.types.list_of(\"Webhook\"),\n        graphql_name=\"webhooks\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"board_id\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.non_null(Int), graphql_name=\"board_id\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Reply","title":"<code>Reply</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Reply(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"body\",\n        \"created_at\",\n        \"creator\",\n        \"creator_id\",\n        \"id\",\n        \"text_body\",\n        \"updated_at\",\n    )\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    created_at = sgqlc.types.Field(Date, graphql_name=\"created_at\")\n    creator = sgqlc.types.Field(\"User\", graphql_name=\"creator\")\n    creator_id = sgqlc.types.Field(String, graphql_name=\"creator_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    text_body = sgqlc.types.Field(String, graphql_name=\"text_body\")\n    updated_at = sgqlc.types.Field(Date, graphql_name=\"updated_at\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.State","title":"<code>State</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class State(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"active\", \"all\", \"archived\", \"deleted\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Tag","title":"<code>Tag</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Tag(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"color\", \"id\", \"name\")\n    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"color\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"id\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Team","title":"<code>Team</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Team(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"id\", \"name\", \"picture_url\", \"users\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"id\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    picture_url = sgqlc.types.Field(String, graphql_name=\"picture_url\")\n    users = sgqlc.types.Field(\n        sgqlc.types.list_of(\"User\"),\n        graphql_name=\"users\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"ids\", default=None\n                    ),\n                ),\n                (\"kind\", sgqlc.types.Arg(UserKind, graphql_name=\"kind\", default=None)),\n                (\n                    \"newest_first\",\n                    sgqlc.types.Arg(Boolean, graphql_name=\"newest_first\", default=None),\n                ),\n                (\"limit\", sgqlc.types.Arg(Int, graphql_name=\"limit\", default=None)),\n                (\n                    \"emails\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(String), graphql_name=\"emails\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Update","title":"<code>Update</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Update(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"assets\",\n        \"body\",\n        \"created_at\",\n        \"creator\",\n        \"creator_id\",\n        \"id\",\n        \"item_id\",\n        \"replies\",\n        \"text_body\",\n        \"updated_at\",\n    )\n    assets = sgqlc.types.Field(sgqlc.types.list_of(Asset), graphql_name=\"assets\")\n    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"body\")\n    created_at = sgqlc.types.Field(Date, graphql_name=\"created_at\")\n    creator = sgqlc.types.Field(\"User\", graphql_name=\"creator\")\n    creator_id = sgqlc.types.Field(String, graphql_name=\"creator_id\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n    item_id = sgqlc.types.Field(String, graphql_name=\"item_id\")\n    replies = sgqlc.types.Field(sgqlc.types.list_of(Reply), graphql_name=\"replies\")\n    text_body = sgqlc.types.Field(String, graphql_name=\"text_body\")\n    updated_at = sgqlc.types.Field(Date, graphql_name=\"updated_at\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.User","title":"<code>User</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class User(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\n        \"account\",\n        \"birthday\",\n        \"country_code\",\n        \"created_at\",\n        \"current_language\",\n        \"email\",\n        \"enabled\",\n        \"encrypt_api_token\",\n        \"id\",\n        \"is_admin\",\n        \"is_guest\",\n        \"is_pending\",\n        \"is_verified\",\n        \"is_view_only\",\n        \"join_date\",\n        \"location\",\n        \"mobile_phone\",\n        \"name\",\n        \"phone\",\n        \"photo_original\",\n        \"photo_small\",\n        \"photo_thumb\",\n        \"photo_thumb_small\",\n        \"photo_tiny\",\n        \"sign_up_product_kind\",\n        \"teams\",\n        \"time_zone_identifier\",\n        \"title\",\n        \"url\",\n        \"utc_hours_diff\",\n    )\n    account = sgqlc.types.Field(sgqlc.types.non_null(Account), graphql_name=\"account\")\n    birthday = sgqlc.types.Field(Date, graphql_name=\"birthday\")\n    country_code = sgqlc.types.Field(String, graphql_name=\"country_code\")\n    created_at = sgqlc.types.Field(Date, graphql_name=\"created_at\")\n    current_language = sgqlc.types.Field(String, graphql_name=\"current_language\")\n    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"email\")\n    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name=\"enabled\")\n    encrypt_api_token = sgqlc.types.Field(String, graphql_name=\"encrypt_api_token\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"id\")\n    is_admin = sgqlc.types.Field(Boolean, graphql_name=\"is_admin\")\n    is_guest = sgqlc.types.Field(Boolean, graphql_name=\"is_guest\")\n    is_pending = sgqlc.types.Field(Boolean, graphql_name=\"is_pending\")\n    is_verified = sgqlc.types.Field(Boolean, graphql_name=\"is_verified\")\n    is_view_only = sgqlc.types.Field(Boolean, graphql_name=\"is_view_only\")\n    join_date = sgqlc.types.Field(Date, graphql_name=\"join_date\")\n    location = sgqlc.types.Field(String, graphql_name=\"location\")\n    mobile_phone = sgqlc.types.Field(String, graphql_name=\"mobile_phone\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n    phone = sgqlc.types.Field(String, graphql_name=\"phone\")\n    photo_original = sgqlc.types.Field(String, graphql_name=\"photo_original\")\n    photo_small = sgqlc.types.Field(String, graphql_name=\"photo_small\")\n    photo_thumb = sgqlc.types.Field(String, graphql_name=\"photo_thumb\")\n    photo_thumb_small = sgqlc.types.Field(String, graphql_name=\"photo_thumb_small\")\n    photo_tiny = sgqlc.types.Field(String, graphql_name=\"photo_tiny\")\n    sign_up_product_kind = sgqlc.types.Field(\n        String, graphql_name=\"sign_up_product_kind\"\n    )\n    teams = sgqlc.types.Field(\n        sgqlc.types.list_of(Team),\n        graphql_name=\"teams\",\n        args=sgqlc.types.ArgDict(\n            (\n                (\n                    \"ids\",\n                    sgqlc.types.Arg(\n                        sgqlc.types.list_of(Int), graphql_name=\"ids\", default=None\n                    ),\n                ),\n            )\n        ),\n    )\n    time_zone_identifier = sgqlc.types.Field(\n        String, graphql_name=\"time_zone_identifier\"\n    )\n    title = sgqlc.types.Field(String, graphql_name=\"title\")\n    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"url\")\n    utc_hours_diff = sgqlc.types.Field(Int, graphql_name=\"utc_hours_diff\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.UserKind","title":"<code>UserKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class UserKind(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"all\", \"guests\", \"non_guests\", \"non_pending\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Webhook","title":"<code>Webhook</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Webhook(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"board_id\", \"config\", \"event\", \"id\")\n    board_id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"board_id\")\n    config = sgqlc.types.Field(String, graphql_name=\"config\")\n    event = sgqlc.types.Field(\n        sgqlc.types.non_null(WebhookEventType), graphql_name=\"event\"\n    )\n    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name=\"id\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.WebhookEventType","title":"<code>WebhookEventType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class WebhookEventType(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\n        \"change_column_value\",\n        \"change_name\",\n        \"change_specific_column_value\",\n        \"change_status_column_value\",\n        \"change_subitem_column_value\",\n        \"change_subitem_name\",\n        \"create_item\",\n        \"create_subitem\",\n        \"create_subitem_update\",\n        \"create_update\",\n        \"item_archived\",\n        \"item_deleted\",\n        \"subitem_archived\",\n        \"subitem_deleted\",\n        \"when_date_arrived\",\n    )\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.Workspace","title":"<code>Workspace</code>","text":"<p>             Bases: <code>Type</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class Workspace(sgqlc.types.Type):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __field_names__ = (\"account_product\", \"description\", \"id\", \"kind\", \"name\")\n    account_product = sgqlc.types.Field(AccountProduct, graphql_name=\"account_product\")\n    description = sgqlc.types.Field(String, graphql_name=\"description\")\n    id = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name=\"id\")\n    kind = sgqlc.types.Field(WorkspaceKind, graphql_name=\"kind\")\n    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name=\"name\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.WorkspaceKind","title":"<code>WorkspaceKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class WorkspaceKind(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"closed\", \"open\")\n</code></pre>"},{"location":"schemas/graphql_schema/#prefect_monday.schemas.graphql_schema.WorkspaceSubscriberKind","title":"<code>WorkspaceSubscriberKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>See source code for the more info.</p> Source code in <code>prefect_monday/schemas/graphql_schema.py</code> <pre><code>class WorkspaceSubscriberKind(sgqlc.types.Enum):\n    \"\"\"\n    See source code for the more info.\n    \"\"\"\n\n    __schema__ = graphql_schema\n    __choices__ = (\"owner\", \"subscriber\")\n</code></pre>"}]}